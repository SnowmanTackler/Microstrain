# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mscl', [dirname(__file__)])
        except ImportError:
            import _mscl
            return _mscl
        if fp is not None:
            try:
                _mod = imp.load_module('_mscl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mscl = swig_import_helper()
    del swig_import_helper
else:
    import _mscl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _mscl.SwigPyIterator_value(self)
    def incr(self, n=1): return _mscl.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _mscl.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _mscl.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _mscl.SwigPyIterator_equal(self, *args)
    def copy(self): return _mscl.SwigPyIterator_copy(self)
    def next(self): return _mscl.SwigPyIterator_next(self)
    def __next__(self): return _mscl.SwigPyIterator___next__(self)
    def previous(self): return _mscl.SwigPyIterator_previous(self)
    def advance(self, *args): return _mscl.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _mscl.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _mscl.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _mscl.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _mscl.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _mscl.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _mscl.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _mscl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _mscl.SHARED_PTR_DISOWN
valueType_float = _mscl.valueType_float
valueType_double = _mscl.valueType_double
valueType_uint8 = _mscl.valueType_uint8
valueType_uint16 = _mscl.valueType_uint16
valueType_uint32 = _mscl.valueType_uint32
valueType_int16 = _mscl.valueType_int16
valueType_int32 = _mscl.valueType_int32
valueType_bool = _mscl.valueType_bool
valueType_Vector = _mscl.valueType_Vector
valueType_Matrix = _mscl.valueType_Matrix
valueType_Timestamp = _mscl.valueType_Timestamp
valueType_string = _mscl.valueType_string
valueType_Bytes = _mscl.valueType_Bytes
valueType_StructuralHealth = _mscl.valueType_StructuralHealth
class LibVersion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LibVersion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LibVersion, name)
    __repr__ = _swig_repr
    __swig_getmethods__["major"] = lambda x: _mscl.LibVersion_major
    if _newclass:major = staticmethod(_mscl.LibVersion_major)
    __swig_getmethods__["minor"] = lambda x: _mscl.LibVersion_minor
    if _newclass:minor = staticmethod(_mscl.LibVersion_minor)
    __swig_getmethods__["patch"] = lambda x: _mscl.LibVersion_patch
    if _newclass:patch = staticmethod(_mscl.LibVersion_patch)
    __swig_getmethods__["asString"] = lambda x: _mscl.LibVersion_asString
    if _newclass:asString = staticmethod(_mscl.LibVersion_asString)
    def __init__(self): 
        this = _mscl.new_LibVersion()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_LibVersion
    __del__ = lambda self : None;
LibVersion_swigregister = _mscl.LibVersion_swigregister
LibVersion_swigregister(LibVersion)

def LibVersion_major():
  return _mscl.LibVersion_major()
LibVersion_major = _mscl.LibVersion_major

def LibVersion_minor():
  return _mscl.LibVersion_minor()
LibVersion_minor = _mscl.LibVersion_minor

def LibVersion_patch():
  return _mscl.LibVersion_patch()
LibVersion_patch = _mscl.LibVersion_patch

def LibVersion_asString():
  return _mscl.LibVersion_asString()
LibVersion_asString = _mscl.LibVersion_asString

class Value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_Value
    __del__ = lambda self : None;
    def storedAs(self): return _mscl.Value_storedAs(self)
    def as_float(self): return _mscl.Value_as_float(self)
    def as_double(self): return _mscl.Value_as_double(self)
    def as_uint8(self): return _mscl.Value_as_uint8(self)
    def as_uint16(self): return _mscl.Value_as_uint16(self)
    def as_uint32(self): return _mscl.Value_as_uint32(self)
    def as_int16(self): return _mscl.Value_as_int16(self)
    def as_int32(self): return _mscl.Value_as_int32(self)
    def as_bool(self): return _mscl.Value_as_bool(self)
    def as_string(self): return _mscl.Value_as_string(self)
Value_swigregister = _mscl.Value_swigregister
Value_swigregister(Value)

class Bin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Bin(*args)
        try: self.this.append(this)
        except: self.this = this
    def start(self): return _mscl.Bin_start(self)
    def end(self): return _mscl.Bin_end(self)
    def count(self): return _mscl.Bin_count(self)
    __swig_destroy__ = _mscl.delete_Bin
    __del__ = lambda self : None;
Bin_swigregister = _mscl.Bin_swigregister
Bin_swigregister(Bin)

class Histogram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Histogram(*args)
        try: self.this.append(this)
        except: self.this = this
    def binsStart(self): return _mscl.Histogram_binsStart(self)
    def binsSize(self): return _mscl.Histogram_binsSize(self)
    def bins(self): return _mscl.Histogram_bins(self)
    def addBin(self, *args): return _mscl.Histogram_addBin(self, *args)
    __swig_destroy__ = _mscl.delete_Histogram
    __del__ = lambda self : None;
Histogram_swigregister = _mscl.Histogram_swigregister
Histogram_swigregister(Histogram)

class Timestamp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timestamp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timestamp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Timestamp(*args)
        try: self.this.append(this)
        except: self.this = this
    def nanoseconds(self): return _mscl.Timestamp_nanoseconds(self)
    def seconds(self): return _mscl.Timestamp_seconds(self)
    def __str__(self): return _mscl.Timestamp___str__(self)
    def setTime(self, *args): return _mscl.Timestamp_setTime(self, *args)
    def setTimeNow(self): return _mscl.Timestamp_setTimeNow(self)
    __swig_getmethods__["timeNow"] = lambda x: _mscl.Timestamp_timeNow
    if _newclass:timeNow = staticmethod(_mscl.Timestamp_timeNow)
    __swig_destroy__ = _mscl.delete_Timestamp
    __del__ = lambda self : None;
Timestamp_swigregister = _mscl.Timestamp_swigregister
Timestamp_swigregister(Timestamp)

def Timestamp_timeNow():
  return _mscl.Timestamp_timeNow()
Timestamp_timeNow = _mscl.Timestamp_timeNow

class TimeSpan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSpan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSpan, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NANOSECONDS_PER_MICROSECOND = _mscl.TimeSpan_NANOSECONDS_PER_MICROSECOND
    NANOSECONDS_PER_MILLISECOND = _mscl.TimeSpan_NANOSECONDS_PER_MILLISECOND
    NANOSECONDS_PER_SECOND = _mscl.TimeSpan_NANOSECONDS_PER_SECOND
    def getNanoseconds(self): return _mscl.TimeSpan_getNanoseconds(self)
    def getMicroseconds(self): return _mscl.TimeSpan_getMicroseconds(self)
    def getMilliseconds(self): return _mscl.TimeSpan_getMilliseconds(self)
    def getSeconds(self): return _mscl.TimeSpan_getSeconds(self)
    __swig_getmethods__["NanoSeconds"] = lambda x: _mscl.TimeSpan_NanoSeconds
    if _newclass:NanoSeconds = staticmethod(_mscl.TimeSpan_NanoSeconds)
    __swig_getmethods__["MicroSeconds"] = lambda x: _mscl.TimeSpan_MicroSeconds
    if _newclass:MicroSeconds = staticmethod(_mscl.TimeSpan_MicroSeconds)
    __swig_getmethods__["MilliSeconds"] = lambda x: _mscl.TimeSpan_MilliSeconds
    if _newclass:MilliSeconds = staticmethod(_mscl.TimeSpan_MilliSeconds)
    __swig_getmethods__["Seconds"] = lambda x: _mscl.TimeSpan_Seconds
    if _newclass:Seconds = staticmethod(_mscl.TimeSpan_Seconds)
    __swig_getmethods__["Minutes"] = lambda x: _mscl.TimeSpan_Minutes
    if _newclass:Minutes = staticmethod(_mscl.TimeSpan_Minutes)
    __swig_getmethods__["Hours"] = lambda x: _mscl.TimeSpan_Hours
    if _newclass:Hours = staticmethod(_mscl.TimeSpan_Hours)
    __swig_getmethods__["Days"] = lambda x: _mscl.TimeSpan_Days
    if _newclass:Days = staticmethod(_mscl.TimeSpan_Days)
    __swig_destroy__ = _mscl.delete_TimeSpan
    __del__ = lambda self : None;
TimeSpan_swigregister = _mscl.TimeSpan_swigregister
TimeSpan_swigregister(TimeSpan)

def TimeSpan_NanoSeconds(*args):
  return _mscl.TimeSpan_NanoSeconds(*args)
TimeSpan_NanoSeconds = _mscl.TimeSpan_NanoSeconds

def TimeSpan_MicroSeconds(*args):
  return _mscl.TimeSpan_MicroSeconds(*args)
TimeSpan_MicroSeconds = _mscl.TimeSpan_MicroSeconds

def TimeSpan_MilliSeconds(*args):
  return _mscl.TimeSpan_MilliSeconds(*args)
TimeSpan_MilliSeconds = _mscl.TimeSpan_MilliSeconds

def TimeSpan_Seconds(*args):
  return _mscl.TimeSpan_Seconds(*args)
TimeSpan_Seconds = _mscl.TimeSpan_Seconds

def TimeSpan_Minutes(*args):
  return _mscl.TimeSpan_Minutes(*args)
TimeSpan_Minutes = _mscl.TimeSpan_Minutes

def TimeSpan_Hours(*args):
  return _mscl.TimeSpan_Hours(*args)
TimeSpan_Hours = _mscl.TimeSpan_Hours

def TimeSpan_Days(*args):
  return _mscl.TimeSpan_Days(*args)
TimeSpan_Days = _mscl.TimeSpan_Days

class Version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Version(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _mscl.Version___eq__(self, *args)
    def __ne__(self, *args): return _mscl.Version___ne__(self, *args)
    def __lt__(self, *args): return _mscl.Version___lt__(self, *args)
    def __le__(self, *args): return _mscl.Version___le__(self, *args)
    def __gt__(self, *args): return _mscl.Version___gt__(self, *args)
    def __ge__(self, *args): return _mscl.Version___ge__(self, *args)
    def __str__(self): return _mscl.Version___str__(self)
    def fromString(self, *args): return _mscl.Version_fromString(self, *args)
    def majorPart(self): return _mscl.Version_majorPart(self)
    def minorPart(self): return _mscl.Version_minorPart(self)
    def patchPart(self): return _mscl.Version_patchPart(self)
    __swig_destroy__ = _mscl.delete_Version
    __del__ = lambda self : None;
Version_swigregister = _mscl.Version_swigregister
Version_swigregister(Version)

class DeviceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceInfo, name)
    __repr__ = _swig_repr
    STATUS_UNKNOWN = _mscl.DeviceInfo_STATUS_UNKNOWN
    STATUS_AVAILABLE = _mscl.DeviceInfo_STATUS_AVAILABLE
    STATUS_UNAVAILABLE = _mscl.DeviceInfo_STATUS_UNAVAILABLE
    def __init__(self, *args): 
        this = _mscl.new_DeviceInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def status(self): return _mscl.DeviceInfo_status(self)
    def serial(self): return _mscl.DeviceInfo_serial(self)
    __swig_destroy__ = _mscl.delete_DeviceInfo
    __del__ = lambda self : None;
DeviceInfo_swigregister = _mscl.DeviceInfo_swigregister
DeviceInfo_swigregister(DeviceInfo)

class Devices(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Devices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Devices, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["listBaseStations"] = lambda x: _mscl.Devices_listBaseStations
    if _newclass:listBaseStations = staticmethod(_mscl.Devices_listBaseStations)
    __swig_getmethods__["listInertialDevices"] = lambda x: _mscl.Devices_listInertialDevices
    if _newclass:listInertialDevices = staticmethod(_mscl.Devices_listInertialDevices)
    __swig_getmethods__["listPorts"] = lambda x: _mscl.Devices_listPorts
    if _newclass:listPorts = staticmethod(_mscl.Devices_listPorts)
    __swig_destroy__ = _mscl.delete_Devices
    __del__ = lambda self : None;
Devices_swigregister = _mscl.Devices_swigregister
Devices_swigregister(Devices)

def Devices_listBaseStations():
  return _mscl.Devices_listBaseStations()
Devices_listBaseStations = _mscl.Devices_listBaseStations

def Devices_listInertialDevices():
  return _mscl.Devices_listInertialDevices()
Devices_listInertialDevices = _mscl.Devices_listInertialDevices

def Devices_listPorts():
  return _mscl.Devices_listPorts()
Devices_listPorts = _mscl.Devices_listPorts

class Connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Connection, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_Connection()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["Serial"] = lambda x: _mscl.Connection_Serial
    if _newclass:Serial = staticmethod(_mscl.Connection_Serial)
    __swig_getmethods__["TcpIp"] = lambda x: _mscl.Connection_TcpIp
    if _newclass:TcpIp = staticmethod(_mscl.Connection_TcpIp)
    def description(self): return _mscl.Connection_description(self)
    def disconnect(self): return _mscl.Connection_disconnect(self)
    def reconnect(self): return _mscl.Connection_reconnect(self)
    def write(self, *args): return _mscl.Connection_write(self, *args)
    def writeStr(self, *args): return _mscl.Connection_writeStr(self, *args)
    def clearBuffer(self): return _mscl.Connection_clearBuffer(self)
    def rawByteMode(self, *args): return _mscl.Connection_rawByteMode(self, *args)
    def getRawBytes(self, timeout=0, maxBytes=0): return _mscl.Connection_getRawBytes(self, timeout, maxBytes)
    def getRawBytesStr(self, timeout=0, maxBytes=0): return _mscl.Connection_getRawBytesStr(self, timeout, maxBytes)
    __swig_destroy__ = _mscl.delete_Connection
    __del__ = lambda self : None;
Connection_swigregister = _mscl.Connection_swigregister
Connection_swigregister(Connection)

def Connection_Serial(*args):
  return _mscl.Connection_Serial(*args)
Connection_Serial = _mscl.Connection_Serial

def Connection_TcpIp(*args):
  return _mscl.Connection_TcpIp(*args)
Connection_TcpIp = _mscl.Connection_TcpIp

class WirelessTypes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WirelessTypes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WirelessTypes, name)
    __repr__ = _swig_repr
    microcontroller_18F452 = _mscl.WirelessTypes_microcontroller_18F452
    microcontroller_18F4620 = _mscl.WirelessTypes_microcontroller_18F4620
    microcontroller_18F46K20 = _mscl.WirelessTypes_microcontroller_18F46K20
    microcontroller_18F67K90 = _mscl.WirelessTypes_microcontroller_18F67K90
    microcontroller_EFM32WG990F256 = _mscl.WirelessTypes_microcontroller_EFM32WG990F256
    collectionMethod_logOnly = _mscl.WirelessTypes_collectionMethod_logOnly
    collectionMethod_transmitOnly = _mscl.WirelessTypes_collectionMethod_transmitOnly
    collectionMethod_logAndTransmit = _mscl.WirelessTypes_collectionMethod_logAndTransmit
    dataType_first = _mscl.WirelessTypes_dataType_first
    dataType_2byteUInt_shifted = _mscl.WirelessTypes_dataType_2byteUInt_shifted
    dataType_4ByteFloat = _mscl.WirelessTypes_dataType_4ByteFloat
    dataType_2byteUInt_12bitRes = _mscl.WirelessTypes_dataType_2byteUInt_12bitRes
    dataType_4byteUInt = _mscl.WirelessTypes_dataType_4byteUInt
    dataType_2byteUInt_16bitRes = _mscl.WirelessTypes_dataType_2byteUInt_16bitRes
    dataType_last = _mscl.WirelessTypes_dataType_last
    dataFormat_2byte_uint = _mscl.WirelessTypes_dataFormat_2byte_uint
    dataFormat_4byte_float = _mscl.WirelessTypes_dataFormat_4byte_float
    syncMode_continuous = _mscl.WirelessTypes_syncMode_continuous
    syncMode_burst = _mscl.WirelessTypes_syncMode_burst
    samplingMode_sync = _mscl.WirelessTypes_samplingMode_sync
    samplingMode_syncBurst = _mscl.WirelessTypes_samplingMode_syncBurst
    samplingMode_nonSync = _mscl.WirelessTypes_samplingMode_nonSync
    samplingMode_armedDatalog = _mscl.WirelessTypes_samplingMode_armedDatalog
    defaultMode_idle = _mscl.WirelessTypes_defaultMode_idle
    defaultMode_ldc = _mscl.WirelessTypes_defaultMode_ldc
    defaultMode_datalog = _mscl.WirelessTypes_defaultMode_datalog
    defaultMode_sleep = _mscl.WirelessTypes_defaultMode_sleep
    defaultMode_sync = _mscl.WirelessTypes_defaultMode_sync
    freq_unknown = _mscl.WirelessTypes_freq_unknown
    freq_11 = _mscl.WirelessTypes_freq_11
    freq_12 = _mscl.WirelessTypes_freq_12
    freq_13 = _mscl.WirelessTypes_freq_13
    freq_14 = _mscl.WirelessTypes_freq_14
    freq_15 = _mscl.WirelessTypes_freq_15
    freq_16 = _mscl.WirelessTypes_freq_16
    freq_17 = _mscl.WirelessTypes_freq_17
    freq_18 = _mscl.WirelessTypes_freq_18
    freq_19 = _mscl.WirelessTypes_freq_19
    freq_20 = _mscl.WirelessTypes_freq_20
    freq_21 = _mscl.WirelessTypes_freq_21
    freq_22 = _mscl.WirelessTypes_freq_22
    freq_23 = _mscl.WirelessTypes_freq_23
    freq_24 = _mscl.WirelessTypes_freq_24
    freq_25 = _mscl.WirelessTypes_freq_25
    freq_26 = _mscl.WirelessTypes_freq_26
    power_16dBm = _mscl.WirelessTypes_power_16dBm
    power_10dBm = _mscl.WirelessTypes_power_10dBm
    power_5dBm = _mscl.WirelessTypes_power_5dBm
    power_0dBm = _mscl.WirelessTypes_power_0dBm
    retransmission_off = _mscl.WirelessTypes_retransmission_off
    retransmission_on = _mscl.WirelessTypes_retransmission_on
    retransmission_disabled = _mscl.WirelessTypes_retransmission_disabled
    trigger_userInit = _mscl.WirelessTypes_trigger_userInit
    trigger_ceiling = _mscl.WirelessTypes_trigger_ceiling
    trigger_floor = _mscl.WirelessTypes_trigger_floor
    trigger_rampUp = _mscl.WirelessTypes_trigger_rampUp
    trigger_rampDown = _mscl.WirelessTypes_trigger_rampDown
    equation_none = _mscl.WirelessTypes_equation_none
    equation_standard = _mscl.WirelessTypes_equation_standard
    unit_none = _mscl.WirelessTypes_unit_none
    unit_bits = _mscl.WirelessTypes_unit_bits
    unit_strain_strain = _mscl.WirelessTypes_unit_strain_strain
    unit_strain_microStrain = _mscl.WirelessTypes_unit_strain_microStrain
    unit_accel_g = _mscl.WirelessTypes_unit_accel_g
    unit_accel_milliG = _mscl.WirelessTypes_unit_accel_milliG
    unit_accel_ms2 = _mscl.WirelessTypes_unit_accel_ms2
    unit_volts_volts = _mscl.WirelessTypes_unit_volts_volts
    unit_volts_millivolts = _mscl.WirelessTypes_unit_volts_millivolts
    unit_volts_microvolts = _mscl.WirelessTypes_unit_volts_microvolts
    unit_temp_celsius = _mscl.WirelessTypes_unit_temp_celsius
    unit_temp_kelvin = _mscl.WirelessTypes_unit_temp_kelvin
    unit_temp_fahrenheit = _mscl.WirelessTypes_unit_temp_fahrenheit
    unit_displacement_meters = _mscl.WirelessTypes_unit_displacement_meters
    unit_displacement_millimeters = _mscl.WirelessTypes_unit_displacement_millimeters
    unit_displacement_micrometers = _mscl.WirelessTypes_unit_displacement_micrometers
    unit_force_lbf = _mscl.WirelessTypes_unit_force_lbf
    unit_force_newtons = _mscl.WirelessTypes_unit_force_newtons
    unit_force_kiloNewtons = _mscl.WirelessTypes_unit_force_kiloNewtons
    unit_mass_kilograms = _mscl.WirelessTypes_unit_mass_kilograms
    unit_pressure_bar = _mscl.WirelessTypes_unit_pressure_bar
    unit_pressure_psi = _mscl.WirelessTypes_unit_pressure_psi
    unit_pressure_atm = _mscl.WirelessTypes_unit_pressure_atm
    unit_pressure_mmHg = _mscl.WirelessTypes_unit_pressure_mmHg
    unit_pressure_pascal = _mscl.WirelessTypes_unit_pressure_pascal
    unit_pressure_megaPascal = _mscl.WirelessTypes_unit_pressure_megaPascal
    unit_pressure_kiloPascal = _mscl.WirelessTypes_unit_pressure_kiloPascal
    unit_general_degrees = _mscl.WirelessTypes_unit_general_degrees
    unit_general_degreesPerSec = _mscl.WirelessTypes_unit_general_degreesPerSec
    unit_general_radiansPerSec = _mscl.WirelessTypes_unit_general_radiansPerSec
    unit_general_percent = _mscl.WirelessTypes_unit_general_percent
    unit_general_rpm = _mscl.WirelessTypes_unit_general_rpm
    unit_general_hertz = _mscl.WirelessTypes_unit_general_hertz
    unit_general_percentRh = _mscl.WirelessTypes_unit_general_percentRh
    unit_general_mVperV = _mscl.WirelessTypes_unit_general_mVperV
    chType_none = _mscl.WirelessTypes_chType_none
    chType_fullDifferential = _mscl.WirelessTypes_chType_fullDifferential
    chType_singleEnded = _mscl.WirelessTypes_chType_singleEnded
    chType_battery = _mscl.WirelessTypes_chType_battery
    chType_temperature = _mscl.WirelessTypes_chType_temperature
    chType_rh = _mscl.WirelessTypes_chType_rh
    chType_acceleration = _mscl.WirelessTypes_chType_acceleration
    chType_displacement = _mscl.WirelessTypes_chType_displacement
    chType_voltage = _mscl.WirelessTypes_chType_voltage
    chType_diffTemperature = _mscl.WirelessTypes_chType_diffTemperature
    settling_4ms = _mscl.WirelessTypes_settling_4ms
    settling_8ms = _mscl.WirelessTypes_settling_8ms
    settling_16ms = _mscl.WirelessTypes_settling_16ms
    settling_32ms = _mscl.WirelessTypes_settling_32ms
    settling_40ms = _mscl.WirelessTypes_settling_40ms
    settling_48ms = _mscl.WirelessTypes_settling_48ms
    settling_60ms = _mscl.WirelessTypes_settling_60ms
    settling_101ms_90db = _mscl.WirelessTypes_settling_101ms_90db
    settling_120ms_80db = _mscl.WirelessTypes_settling_120ms_80db
    settling_120ms_65db = _mscl.WirelessTypes_settling_120ms_65db
    settling_160ms_69db = _mscl.WirelessTypes_settling_160ms_69db
    settling_200ms = _mscl.WirelessTypes_settling_200ms
    tc_uncompensated = _mscl.WirelessTypes_tc_uncompensated
    tc_K = _mscl.WirelessTypes_tc_K
    tc_J = _mscl.WirelessTypes_tc_J
    tc_R = _mscl.WirelessTypes_tc_R
    tc_S = _mscl.WirelessTypes_tc_S
    tc_T = _mscl.WirelessTypes_tc_T
    tc_E = _mscl.WirelessTypes_tc_E
    tc_B = _mscl.WirelessTypes_tc_B
    tc_N = _mscl.WirelessTypes_tc_N
    tc_customPolynomial = _mscl.WirelessTypes_tc_customPolynomial
    sampleRate_104170Hz = _mscl.WirelessTypes_sampleRate_104170Hz
    sampleRate_78125Hz = _mscl.WirelessTypes_sampleRate_78125Hz
    sampleRate_62500Hz = _mscl.WirelessTypes_sampleRate_62500Hz
    sampleRate_25000Hz = _mscl.WirelessTypes_sampleRate_25000Hz
    sampleRate_12500Hz = _mscl.WirelessTypes_sampleRate_12500Hz
    sampleRate_3200Hz = _mscl.WirelessTypes_sampleRate_3200Hz
    sampleRate_1600Hz = _mscl.WirelessTypes_sampleRate_1600Hz
    sampleRate_800Hz = _mscl.WirelessTypes_sampleRate_800Hz
    sampleRate_1kHz = _mscl.WirelessTypes_sampleRate_1kHz
    sampleRate_2kHz = _mscl.WirelessTypes_sampleRate_2kHz
    sampleRate_3kHz = _mscl.WirelessTypes_sampleRate_3kHz
    sampleRate_4kHz = _mscl.WirelessTypes_sampleRate_4kHz
    sampleRate_5kHz = _mscl.WirelessTypes_sampleRate_5kHz
    sampleRate_6kHz = _mscl.WirelessTypes_sampleRate_6kHz
    sampleRate_7kHz = _mscl.WirelessTypes_sampleRate_7kHz
    sampleRate_8kHz = _mscl.WirelessTypes_sampleRate_8kHz
    sampleRate_9kHz = _mscl.WirelessTypes_sampleRate_9kHz
    sampleRate_10kHz = _mscl.WirelessTypes_sampleRate_10kHz
    sampleRate_20kHz = _mscl.WirelessTypes_sampleRate_20kHz
    sampleRate_30kHz = _mscl.WirelessTypes_sampleRate_30kHz
    sampleRate_40kHz = _mscl.WirelessTypes_sampleRate_40kHz
    sampleRate_50kHz = _mscl.WirelessTypes_sampleRate_50kHz
    sampleRate_60kHz = _mscl.WirelessTypes_sampleRate_60kHz
    sampleRate_70kHz = _mscl.WirelessTypes_sampleRate_70kHz
    sampleRate_80kHz = _mscl.WirelessTypes_sampleRate_80kHz
    sampleRate_90kHz = _mscl.WirelessTypes_sampleRate_90kHz
    sampleRate_100kHz = _mscl.WirelessTypes_sampleRate_100kHz
    sampleRate_4096Hz = _mscl.WirelessTypes_sampleRate_4096Hz
    sampleRate_2048Hz = _mscl.WirelessTypes_sampleRate_2048Hz
    sampleRate_1024Hz = _mscl.WirelessTypes_sampleRate_1024Hz
    sampleRate_512Hz = _mscl.WirelessTypes_sampleRate_512Hz
    sampleRate_256Hz = _mscl.WirelessTypes_sampleRate_256Hz
    sampleRate_128Hz = _mscl.WirelessTypes_sampleRate_128Hz
    sampleRate_64Hz = _mscl.WirelessTypes_sampleRate_64Hz
    sampleRate_32Hz = _mscl.WirelessTypes_sampleRate_32Hz
    sampleRate_16Hz = _mscl.WirelessTypes_sampleRate_16Hz
    sampleRate_8Hz = _mscl.WirelessTypes_sampleRate_8Hz
    sampleRate_4Hz = _mscl.WirelessTypes_sampleRate_4Hz
    sampleRate_2Hz = _mscl.WirelessTypes_sampleRate_2Hz
    sampleRate_1Hz = _mscl.WirelessTypes_sampleRate_1Hz
    sampleRate_2Sec = _mscl.WirelessTypes_sampleRate_2Sec
    sampleRate_5Sec = _mscl.WirelessTypes_sampleRate_5Sec
    sampleRate_10Sec = _mscl.WirelessTypes_sampleRate_10Sec
    sampleRate_30Sec = _mscl.WirelessTypes_sampleRate_30Sec
    sampleRate_1Min = _mscl.WirelessTypes_sampleRate_1Min
    sampleRate_2Min = _mscl.WirelessTypes_sampleRate_2Min
    sampleRate_5Min = _mscl.WirelessTypes_sampleRate_5Min
    sampleRate_10Min = _mscl.WirelessTypes_sampleRate_10Min
    sampleRate_30Min = _mscl.WirelessTypes_sampleRate_30Min
    sampleRate_60Min = _mscl.WirelessTypes_sampleRate_60Min
    sampleRate_24Hours = _mscl.WirelessTypes_sampleRate_24Hours
    region_usa = _mscl.WirelessTypes_region_usa
    region_europe = _mscl.WirelessTypes_region_europe
    region_japan = _mscl.WirelessTypes_region_japan
    region_other = _mscl.WirelessTypes_region_other
    region_brazil = _mscl.WirelessTypes_region_brazil
    chSetting_hardwareGain = _mscl.WirelessTypes_chSetting_hardwareGain
    chSetting_filterSettlingTime = _mscl.WirelessTypes_chSetting_filterSettlingTime
    chSetting_thermocoupleType = _mscl.WirelessTypes_chSetting_thermocoupleType
    chSetting_linearEquation = _mscl.WirelessTypes_chSetting_linearEquation
    chSetting_unit = _mscl.WirelessTypes_chSetting_unit
    chSetting_equationType = _mscl.WirelessTypes_chSetting_equationType
    chSetting_hardwareOffset = _mscl.WirelessTypes_chSetting_hardwareOffset
    autoBalance_low = _mscl.WirelessTypes_autoBalance_low
    autoBalance_midscale = _mscl.WirelessTypes_autoBalance_midscale
    autoBalance_high = _mscl.WirelessTypes_autoBalance_high
    autocal_success = _mscl.WirelessTypes_autocal_success
    autocal_maybeInvalid = _mscl.WirelessTypes_autocal_maybeInvalid
    autocal_notComplete = _mscl.WirelessTypes_autocal_notComplete
    autocalError_none = _mscl.WirelessTypes_autocalError_none
    autocalError_sensorDetached = _mscl.WirelessTypes_autocalError_sensorDetached
    autocalError_sensorShorted = _mscl.WirelessTypes_autocalError_sensorShorted
    UNKNOWN_RSSI = _mscl.WirelessTypes_UNKNOWN_RSSI
    def __init__(self): 
        this = _mscl.new_WirelessTypes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_WirelessTypes
    __del__ = lambda self : None;
WirelessTypes_swigregister = _mscl.WirelessTypes_swigregister
WirelessTypes_swigregister(WirelessTypes)

class SampleRate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleRate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleRate, name)
    __repr__ = _swig_repr
    rateType_seconds = _mscl.SampleRate_rateType_seconds
    rateType_hertz = _mscl.SampleRate_rateType_hertz
    rateType_event = _mscl.SampleRate_rateType_event
    def __init__(self, *args): 
        this = _mscl.new_SampleRate(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self): return _mscl.SampleRate___str__(self)
    def prettyStr(self): return _mscl.SampleRate_prettyStr(self)
    def samplePeriod(self): return _mscl.SampleRate_samplePeriod(self)
    def samplesPerSecond(self): return _mscl.SampleRate_samplesPerSecond(self)
    def rateType(self): return _mscl.SampleRate_rateType(self)
    def samples(self): return _mscl.SampleRate_samples(self)
    def toWirelessSampleRate(self): return _mscl.SampleRate_toWirelessSampleRate(self)
    __swig_getmethods__["Hertz"] = lambda x: _mscl.SampleRate_Hertz
    if _newclass:Hertz = staticmethod(_mscl.SampleRate_Hertz)
    __swig_getmethods__["KiloHertz"] = lambda x: _mscl.SampleRate_KiloHertz
    if _newclass:KiloHertz = staticmethod(_mscl.SampleRate_KiloHertz)
    __swig_getmethods__["Seconds"] = lambda x: _mscl.SampleRate_Seconds
    if _newclass:Seconds = staticmethod(_mscl.SampleRate_Seconds)
    __swig_getmethods__["FromWirelessEepromValue"] = lambda x: _mscl.SampleRate_FromWirelessEepromValue
    if _newclass:FromWirelessEepromValue = staticmethod(_mscl.SampleRate_FromWirelessEepromValue)
    __swig_destroy__ = _mscl.delete_SampleRate
    __del__ = lambda self : None;
SampleRate_swigregister = _mscl.SampleRate_swigregister
SampleRate_swigregister(SampleRate)

def SampleRate_Hertz(*args):
  return _mscl.SampleRate_Hertz(*args)
SampleRate_Hertz = _mscl.SampleRate_Hertz

def SampleRate_KiloHertz(*args):
  return _mscl.SampleRate_KiloHertz(*args)
SampleRate_KiloHertz = _mscl.SampleRate_KiloHertz

def SampleRate_Seconds(*args):
  return _mscl.SampleRate_Seconds(*args)
SampleRate_Seconds = _mscl.SampleRate_Seconds

def SampleRate_FromWirelessEepromValue(*args):
  return _mscl.SampleRate_FromWirelessEepromValue(*args)
SampleRate_FromWirelessEepromValue = _mscl.SampleRate_FromWirelessEepromValue

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_Vector()
        try: self.this.append(this)
        except: self.this = this
    def valuesType(self): return _mscl.Vector_valuesType(self)
    def size(self): return _mscl.Vector_size(self)
    def as_floatAt(self, *args): return _mscl.Vector_as_floatAt(self, *args)
    def as_uint16At(self, *args): return _mscl.Vector_as_uint16At(self, *args)
    def as_uint8At(self, *args): return _mscl.Vector_as_uint8At(self, *args)
    def __str__(self): return _mscl.Vector___str__(self)
    __swig_destroy__ = _mscl.delete_Vector
    __del__ = lambda self : None;
Vector_swigregister = _mscl.Vector_swigregister
Vector_swigregister(Vector)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_Matrix()
        try: self.this.append(this)
        except: self.this = this
    def valuesType(self): return _mscl.Matrix_valuesType(self)
    def rows(self): return _mscl.Matrix_rows(self)
    def columns(self): return _mscl.Matrix_columns(self)
    def as_floatAt(self, *args): return _mscl.Matrix_as_floatAt(self, *args)
    def as_uint16At(self, *args): return _mscl.Matrix_as_uint16At(self, *args)
    def as_uint8At(self, *args): return _mscl.Matrix_as_uint8At(self, *args)
    def __str__(self): return _mscl.Matrix___str__(self)
    __swig_destroy__ = _mscl.delete_Matrix
    __del__ = lambda self : None;
Matrix_swigregister = _mscl.Matrix_swigregister
Matrix_swigregister(Matrix)

class StructuralHealth(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructuralHealth, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StructuralHealth, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_StructuralHealth(*args)
        try: self.this.append(this)
        except: self.this = this
    def angle(self): return _mscl.StructuralHealth_angle(self)
    def uptime(self): return _mscl.StructuralHealth_uptime(self)
    def damage(self): return _mscl.StructuralHealth_damage(self)
    def processingRate(self): return _mscl.StructuralHealth_processingRate(self)
    def histogram(self): return _mscl.StructuralHealth_histogram(self)
    __swig_destroy__ = _mscl.delete_StructuralHealth
    __del__ = lambda self : None;
StructuralHealth_swigregister = _mscl.StructuralHealth_swigregister
StructuralHealth_swigregister(StructuralHealth)

class DataPoint(Value):
    __swig_setmethods__ = {}
    for _s in [Value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataPoint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_DataPoint
    __del__ = lambda self : None;
    def as_Vector(self): return _mscl.DataPoint_as_Vector(self)
    def as_Matrix(self): return _mscl.DataPoint_as_Matrix(self)
    def as_Timestamp(self): return _mscl.DataPoint_as_Timestamp(self)
    def as_Bytes(self): return _mscl.DataPoint_as_Bytes(self)
    def as_StructuralHealth(self): return _mscl.DataPoint_as_StructuralHealth(self)
    def as_string(self): return _mscl.DataPoint_as_string(self)
DataPoint_swigregister = _mscl.DataPoint_swigregister
DataPoint_swigregister(DataPoint)

class ChannelMask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelMask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelMask, name)
    __repr__ = _swig_repr
    MAX_CHANNELS = _mscl.ChannelMask_MAX_CHANNELS
    def __init__(self, *args): 
        this = _mscl.new_ChannelMask(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _mscl.ChannelMask___eq__(self, *args)
    def __ne__(self, *args): return _mscl.ChannelMask___ne__(self, *args)
    def __lt__(self, *args): return _mscl.ChannelMask___lt__(self, *args)
    def __gt__(self, *args): return _mscl.ChannelMask___gt__(self, *args)
    def fromMask(self, *args): return _mscl.ChannelMask_fromMask(self, *args)
    def toMask(self): return _mscl.ChannelMask_toMask(self)
    def count(self): return _mscl.ChannelMask_count(self)
    def enabled(self, *args): return _mscl.ChannelMask_enabled(self, *args)
    def enable(self, *args): return _mscl.ChannelMask_enable(self, *args)
    def lastChEnabled(self): return _mscl.ChannelMask_lastChEnabled(self)
    __swig_destroy__ = _mscl.delete_ChannelMask
    __del__ = lambda self : None;
ChannelMask_swigregister = _mscl.ChannelMask_swigregister
ChannelMask_swigregister(ChannelMask)

class ConfigIssue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigIssue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigIssue, name)
    __repr__ = _swig_repr
    CONFIG_SAMPLING_MODE = _mscl.ConfigIssue_CONFIG_SAMPLING_MODE
    CONFIG_ACTIVE_CHANNELS = _mscl.ConfigIssue_CONFIG_ACTIVE_CHANNELS
    CONFIG_SAMPLE_RATE = _mscl.ConfigIssue_CONFIG_SAMPLE_RATE
    CONFIG_SWEEPS = _mscl.ConfigIssue_CONFIG_SWEEPS
    CONFIG_UNLIMITED_DURATION = _mscl.ConfigIssue_CONFIG_UNLIMITED_DURATION
    CONFIG_DATA_FORMAT = _mscl.ConfigIssue_CONFIG_DATA_FORMAT
    CONFIG_DATA_COLLECTION_METHOD = _mscl.ConfigIssue_CONFIG_DATA_COLLECTION_METHOD
    CONFIG_TIME_BETWEEN_BURSTS = _mscl.ConfigIssue_CONFIG_TIME_BETWEEN_BURSTS
    CONFIG_THERMOCOUPLE_TYPE = _mscl.ConfigIssue_CONFIG_THERMOCOUPLE_TYPE
    CONFIG_FILTER_SETTLING_TIME = _mscl.ConfigIssue_CONFIG_FILTER_SETTLING_TIME
    CONFIG_BUTTON = _mscl.ConfigIssue_CONFIG_BUTTON
    CONFIG_ANALOG_PAIR = _mscl.ConfigIssue_CONFIG_ANALOG_PAIR
    CONFIG_HARDWARE_GAIN = _mscl.ConfigIssue_CONFIG_HARDWARE_GAIN
    CONFIG_INACTIVITY_TIMEOUT = _mscl.ConfigIssue_CONFIG_INACTIVITY_TIMEOUT
    CONFIG_CHECK_RADIO_INTERVAL = _mscl.ConfigIssue_CONFIG_CHECK_RADIO_INTERVAL
    CONFIG_LOST_BEACON_TIMEOUT = _mscl.ConfigIssue_CONFIG_LOST_BEACON_TIMEOUT
    CONFIG_DEFAULT_MODE = _mscl.ConfigIssue_CONFIG_DEFAULT_MODE
    CONFIG_TRANSMIT_POWER = _mscl.ConfigIssue_CONFIG_TRANSMIT_POWER
    CONFIG_LINEAR_EQUATION = _mscl.ConfigIssue_CONFIG_LINEAR_EQUATION
    CONFIG_FATIGUE = _mscl.ConfigIssue_CONFIG_FATIGUE
    CONFIG_HISTOGRAM = _mscl.ConfigIssue_CONFIG_HISTOGRAM
    CONFIG_HARDWARE_OFFSET = _mscl.ConfigIssue_CONFIG_HARDWARE_OFFSET
    def __init__(self, *args): 
        this = _mscl.new_ConfigIssue(*args)
        try: self.this.append(this)
        except: self.this = this
    def id(self): return _mscl.ConfigIssue_id(self)
    def description(self): return _mscl.ConfigIssue_description(self)
    def isChannelGroupIssue(self): return _mscl.ConfigIssue_isChannelGroupIssue(self)
    def channelMask(self): return _mscl.ConfigIssue_channelMask(self)
    __swig_destroy__ = _mscl.delete_ConfigIssue
    __del__ = lambda self : None;
ConfigIssue_swigregister = _mscl.ConfigIssue_swigregister
ConfigIssue_swigregister(ConfigIssue)

class SnCurveSegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SnCurveSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SnCurveSegment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_SnCurveSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    def m(self, *args): return _mscl.SnCurveSegment_m(self, *args)
    def logA(self, *args): return _mscl.SnCurveSegment_logA(self, *args)
    __swig_destroy__ = _mscl.delete_SnCurveSegment
    __del__ = lambda self : None;
SnCurveSegment_swigregister = _mscl.SnCurveSegment_swigregister
SnCurveSegment_swigregister(SnCurveSegment)

class FatigueOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FatigueOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FatigueOptions, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_FatigueOptions()
        try: self.this.append(this)
        except: self.this = this
    def youngsModulus(self, *args): return _mscl.FatigueOptions_youngsModulus(self, *args)
    def poissonsRatio(self, *args): return _mscl.FatigueOptions_poissonsRatio(self, *args)
    def peakValleyThreshold(self, *args): return _mscl.FatigueOptions_peakValleyThreshold(self, *args)
    def rawMode(self, *args): return _mscl.FatigueOptions_rawMode(self, *args)
    def damageAngles(self): return _mscl.FatigueOptions_damageAngles(self)
    def damageAngle(self, *args): return _mscl.FatigueOptions_damageAngle(self, *args)
    def snCurveSegments(self): return _mscl.FatigueOptions_snCurveSegments(self)
    def snCurveSegment(self, *args): return _mscl.FatigueOptions_snCurveSegment(self, *args)
    __swig_destroy__ = _mscl.delete_FatigueOptions
    __del__ = lambda self : None;
FatigueOptions_swigregister = _mscl.FatigueOptions_swigregister
FatigueOptions_swigregister(FatigueOptions)

class HistogramOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistogramOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistogramOptions, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_HistogramOptions()
        try: self.this.append(this)
        except: self.this = this
    def transmitRate(self, *args): return _mscl.HistogramOptions_transmitRate(self, *args)
    def binsStart(self, *args): return _mscl.HistogramOptions_binsStart(self, *args)
    def binsSize(self, *args): return _mscl.HistogramOptions_binsSize(self, *args)
    __swig_destroy__ = _mscl.delete_HistogramOptions
    __del__ = lambda self : None;
HistogramOptions_swigregister = _mscl.HistogramOptions_swigregister
HistogramOptions_swigregister(HistogramOptions)

class WirelessModels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WirelessModels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WirelessModels, name)
    __repr__ = _swig_repr
    node_gLink_2g = _mscl.WirelessModels_node_gLink_2g
    node_gLink_10g = _mscl.WirelessModels_node_gLink_10g
    node_gLinkII_cust_in = _mscl.WirelessModels_node_gLinkII_cust_in
    node_gLinkII_2g_in = _mscl.WirelessModels_node_gLinkII_2g_in
    node_gLinkII_10g_in = _mscl.WirelessModels_node_gLinkII_10g_in
    node_gLinkII_cust_ex = _mscl.WirelessModels_node_gLinkII_cust_ex
    node_gLinkII_2g_ex = _mscl.WirelessModels_node_gLinkII_2g_ex
    node_gLinkII_10g_ex = _mscl.WirelessModels_node_gLinkII_10g_ex
    node_gLink_rgd_10g = _mscl.WirelessModels_node_gLink_rgd_10g
    node_dvrtLink = _mscl.WirelessModels_node_dvrtLink
    node_shmLink = _mscl.WirelessModels_node_shmLink
    node_shmLink2 = _mscl.WirelessModels_node_shmLink2
    node_sgLink = _mscl.WirelessModels_node_sgLink
    node_sgLink_oem_S = _mscl.WirelessModels_node_sgLink_oem_S
    node_sgLink_oem = _mscl.WirelessModels_node_sgLink_oem
    node_sgLink_rgd = _mscl.WirelessModels_node_sgLink_rgd
    node_sgLink_herm = _mscl.WirelessModels_node_sgLink_herm
    node_sgLink_herm_2600 = _mscl.WirelessModels_node_sgLink_herm_2600
    node_sgLink_herm_2700 = _mscl.WirelessModels_node_sgLink_herm_2700
    node_sgLink_herm_2800 = _mscl.WirelessModels_node_sgLink_herm_2800
    node_vLink_legacy = _mscl.WirelessModels_node_vLink_legacy
    node_vLink = _mscl.WirelessModels_node_vLink
    node_tcLink_1ch = _mscl.WirelessModels_node_tcLink_1ch
    node_tcLink_3ch = _mscl.WirelessModels_node_tcLink_3ch
    node_tcLink_6ch = _mscl.WirelessModels_node_tcLink_6ch
    node_tcLink_6ch_ip67 = _mscl.WirelessModels_node_tcLink_6ch_ip67
    node_tcLink_6ch_ip67_rht = _mscl.WirelessModels_node_tcLink_6ch_ip67_rht
    node_envLink_mini = _mscl.WirelessModels_node_envLink_mini
    node_rtdLink = _mscl.WirelessModels_node_rtdLink
    node_iepeLink = _mscl.WirelessModels_node_iepeLink
    node_wattLink = _mscl.WirelessModels_node_wattLink
    node_wattLink_3Y600 = _mscl.WirelessModels_node_wattLink_3Y600
    node_wattLink_3Y480 = _mscl.WirelessModels_node_wattLink_3Y480
    node_wattLink_3Y400 = _mscl.WirelessModels_node_wattLink_3Y400
    node_wattLink_3Y208 = _mscl.WirelessModels_node_wattLink_3Y208
    node_wattLink_3D480 = _mscl.WirelessModels_node_wattLink_3D480
    node_wattLink_3D400 = _mscl.WirelessModels_node_wattLink_3D400
    node_wattLink_3D240 = _mscl.WirelessModels_node_wattLink_3D240
    node_mvPerVLink = _mscl.WirelessModels_node_mvPerVLink
    node_envLink_pro = _mscl.WirelessModels_node_envLink_pro
    node_sgLink_8ch = _mscl.WirelessModels_node_sgLink_8ch
    base_wsda_1000 = _mscl.WirelessModels_base_wsda_1000
    base_wsda_1500 = _mscl.WirelessModels_base_wsda_1500
    base_wsda_2000 = _mscl.WirelessModels_base_wsda_2000
    base_wsdaBase_101_analog = _mscl.WirelessModels_base_wsdaBase_101_analog
    base_wsdaBase_102_rs232 = _mscl.WirelessModels_base_wsdaBase_102_rs232
    base_wsdaBase_104_usb = _mscl.WirelessModels_base_wsdaBase_104_usb
    base_wsdaBase_oem = _mscl.WirelessModels_base_wsdaBase_oem
    def __init__(self): 
        this = _mscl.new_WirelessModels()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_WirelessModels
    __del__ = lambda self : None;
WirelessModels_swigregister = _mscl.WirelessModels_swigregister
WirelessModels_swigregister(WirelessModels)

class NodeDiscovery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeDiscovery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeDiscovery, name)
    __repr__ = _swig_repr
    def nodeAddress(self): return _mscl.NodeDiscovery_nodeAddress(self)
    def frequency(self): return _mscl.NodeDiscovery_frequency(self)
    def panId(self): return _mscl.NodeDiscovery_panId(self)
    def model(self): return _mscl.NodeDiscovery_model(self)
    def serialNumber(self): return _mscl.NodeDiscovery_serialNumber(self)
    def firmwareVersion(self): return _mscl.NodeDiscovery_firmwareVersion(self)
    def defaultMode(self): return _mscl.NodeDiscovery_defaultMode(self)
    def baseRssi(self): return _mscl.NodeDiscovery_baseRssi(self)
    def timestamp(self): return _mscl.NodeDiscovery_timestamp(self)
    def __init__(self): 
        this = _mscl.new_NodeDiscovery()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_NodeDiscovery
    __del__ = lambda self : None;
NodeDiscovery_swigregister = _mscl.NodeDiscovery_swigregister
NodeDiscovery_swigregister(NodeDiscovery)

class LinearEquation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearEquation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinearEquation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_LinearEquation(*args)
        try: self.this.append(this)
        except: self.this = this
    def slope(self, *args): return _mscl.LinearEquation_slope(self, *args)
    def offset(self, *args): return _mscl.LinearEquation_offset(self, *args)
    __swig_destroy__ = _mscl.delete_LinearEquation
    __del__ = lambda self : None;
LinearEquation_swigregister = _mscl.LinearEquation_swigregister
LinearEquation_swigregister(LinearEquation)

class ChannelGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelGroup, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_ChannelGroup()
        try: self.this.append(this)
        except: self.this = this
    def channels(self): return _mscl.ChannelGroup_channels(self)
    def name(self): return _mscl.ChannelGroup_name(self)
    def settings(self): return _mscl.ChannelGroup_settings(self)
    __swig_destroy__ = _mscl.delete_ChannelGroup
    __del__ = lambda self : None;
ChannelGroup_swigregister = _mscl.ChannelGroup_swigregister
ChannelGroup_swigregister(ChannelGroup)

class WirelessChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WirelessChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WirelessChannel, name)
    __repr__ = _swig_repr
    channel_unknown = _mscl.WirelessChannel_channel_unknown
    channel_1 = _mscl.WirelessChannel_channel_1
    channel_2 = _mscl.WirelessChannel_channel_2
    channel_3 = _mscl.WirelessChannel_channel_3
    channel_4 = _mscl.WirelessChannel_channel_4
    channel_5 = _mscl.WirelessChannel_channel_5
    channel_6 = _mscl.WirelessChannel_channel_6
    channel_7 = _mscl.WirelessChannel_channel_7
    channel_8 = _mscl.WirelessChannel_channel_8
    channel_9 = _mscl.WirelessChannel_channel_9
    channel_10 = _mscl.WirelessChannel_channel_10
    channel_11 = _mscl.WirelessChannel_channel_11
    channel_12 = _mscl.WirelessChannel_channel_12
    channel_13 = _mscl.WirelessChannel_channel_13
    channel_14 = _mscl.WirelessChannel_channel_14
    channel_15 = _mscl.WirelessChannel_channel_15
    channel_16 = _mscl.WirelessChannel_channel_16
    channel_digital_1 = _mscl.WirelessChannel_channel_digital_1
    channel_digital_2 = _mscl.WirelessChannel_channel_digital_2
    channel_digital_3 = _mscl.WirelessChannel_channel_digital_3
    channel_digital_4 = _mscl.WirelessChannel_channel_digital_4
    channel_digital_5 = _mscl.WirelessChannel_channel_digital_5
    channel_digital_6 = _mscl.WirelessChannel_channel_digital_6
    channel_digital_7 = _mscl.WirelessChannel_channel_digital_7
    channel_digital_8 = _mscl.WirelessChannel_channel_digital_8
    channel_digital_9 = _mscl.WirelessChannel_channel_digital_9
    channel_digital_10 = _mscl.WirelessChannel_channel_digital_10
    channel_digital_11 = _mscl.WirelessChannel_channel_digital_11
    channel_digital_12 = _mscl.WirelessChannel_channel_digital_12
    channel_digital_13 = _mscl.WirelessChannel_channel_digital_13
    channel_digital_14 = _mscl.WirelessChannel_channel_digital_14
    channel_digital_15 = _mscl.WirelessChannel_channel_digital_15
    channel_digital_16 = _mscl.WirelessChannel_channel_digital_16
    channel_structuralHealth = _mscl.WirelessChannel_channel_structuralHealth
    channel_hcl_rawBase_mag1_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag1_x
    channel_hcl_rawBase_mag1_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag1_y
    channel_hcl_rawBase_mag1_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag1_z
    channel_hcl_rawBase_mag2_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag2_x
    channel_hcl_rawBase_mag2_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag2_y
    channel_hcl_rawBase_mag2_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag2_z
    channel_hcl_rawBase_mag3_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag3_x
    channel_hcl_rawBase_mag3_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag3_y
    channel_hcl_rawBase_mag3_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag3_z
    channel_hcl_rawBase_mag4_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag4_x
    channel_hcl_rawBase_mag4_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag4_y
    channel_hcl_rawBase_mag4_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag4_z
    channel_hcl_rawBase_mag5_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag5_x
    channel_hcl_rawBase_mag5_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag5_y
    channel_hcl_rawBase_mag5_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag5_z
    channel_hcl_rawBase_mag6_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag6_x
    channel_hcl_rawBase_mag6_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag6_y
    channel_hcl_rawBase_mag6_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag6_z
    channel_hcl_rawBase_mag7_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag7_x
    channel_hcl_rawBase_mag7_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag7_y
    channel_hcl_rawBase_mag7_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag7_z
    channel_hcl_rawBase_mag8_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag8_x
    channel_hcl_rawBase_mag8_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag8_y
    channel_hcl_rawBase_mag8_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag8_z
    channel_hcl_rawBase_gyro_x = _mscl.WirelessChannel_channel_hcl_rawBase_gyro_x
    channel_hcl_rawBase_gyro_y = _mscl.WirelessChannel_channel_hcl_rawBase_gyro_y
    channel_hcl_rawBase_gyro_z = _mscl.WirelessChannel_channel_hcl_rawBase_gyro_z
    channel_error_code = _mscl.WirelessChannel_channel_error_code
    channel_hcl_rawStrain_BL30 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL30
    channel_hcl_rawStrain_BL120 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL120
    channel_hcl_rawStrain_A60 = _mscl.WirelessChannel_channel_hcl_rawStrain_A60
    channel_hcl_rawStrain_A150 = _mscl.WirelessChannel_channel_hcl_rawStrain_A150
    channel_hcl_rawStrain_AL30 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL30
    channel_hcl_rawStrain_AL120 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL120
    channel_hcl_rawStrain_BR60 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR60
    channel_hcl_rawStrain_BR150 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR150
    channel_hcl_rawStrain_B30 = _mscl.WirelessChannel_channel_hcl_rawStrain_B30
    channel_hcl_rawStrain_T120 = _mscl.WirelessChannel_channel_hcl_rawStrain_T120
    channel_hcl_rawStrain_AR60 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR60
    channel_hcl_rawStrain_AR150 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR150
    channel_hcl_rawStrain_A30 = _mscl.WirelessChannel_channel_hcl_rawStrain_A30
    channel_hcl_rawStrain_A120 = _mscl.WirelessChannel_channel_hcl_rawStrain_A120
    channel_hcl_rawStrain_BL90 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL90
    channel_hcl_rawStrain_BL180 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL180
    channel_hcl_rawStrain_BR30 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR30
    channel_hcl_rawStrain_BR120 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR120
    channel_hcl_rawStrain_AL90 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL90
    channel_hcl_rawStrain_AL180 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL180
    channel_hcl_rawStrain_AR30 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR30
    channel_hcl_rawStrain_AR120 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR120
    channel_hcl_rawStrain_B90 = _mscl.WirelessChannel_channel_hcl_rawStrain_B90
    channel_hcl_rawStrain_T0 = _mscl.WirelessChannel_channel_hcl_rawStrain_T0
    channel_hcl_rawStrain_BL60 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL60
    channel_hcl_rawStrain_BL150 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL150
    channel_hcl_rawStrain_A90 = _mscl.WirelessChannel_channel_hcl_rawStrain_A90
    channel_hcl_rawStrain_A0 = _mscl.WirelessChannel_channel_hcl_rawStrain_A0
    channel_hcl_rawStrain_AL60 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL60
    channel_hcl_rawStrain_AL150 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL150
    channel_hcl_rawStrain_BR90 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR90
    channel_hcl_rawStrain_BR0 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR0
    channel_hcl_rawStrain_T60 = _mscl.WirelessChannel_channel_hcl_rawStrain_T60
    channel_hcl_rawStrain_B150 = _mscl.WirelessChannel_channel_hcl_rawStrain_B150
    channel_hcl_rawStrain_AR90 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR90
    channel_hcl_rawStrain_AR0 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR0
    channel_hcl_rawInertial_accel1 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel1
    channel_hcl_rawInertial_accel2 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel2
    channel_hcl_rawInertial_accel3 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel3
    channel_hcl_rawInertial_accel4 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel4
    channel_hcl_rawInertial_accel5 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel5
    channel_hcl_rawInertial_accel6 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel6
    channel_hcl_rawInertial_accel7 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel7
    channel_hcl_rawInertial_accel8 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel8
    channel_hcl_rawInertial_gyroX = _mscl.WirelessChannel_channel_hcl_rawInertial_gyroX
    channel_hcl_rawInertial_gyroY = _mscl.WirelessChannel_channel_hcl_rawInertial_gyroY
    channel_hcl_rawInertial_gyroZ = _mscl.WirelessChannel_channel_hcl_rawInertial_gyroZ
    def __init__(self, *args): 
        this = _mscl.new_WirelessChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def channelNumber(self): return _mscl.WirelessChannel_channelNumber(self)
    def id(self): return _mscl.WirelessChannel_id(self)
    def type(self): return _mscl.WirelessChannel_type(self)
    def name(self): return _mscl.WirelessChannel_name(self)
    __swig_destroy__ = _mscl.delete_WirelessChannel
    __del__ = lambda self : None;
WirelessChannel_swigregister = _mscl.WirelessChannel_swigregister
WirelessChannel_swigregister(WirelessChannel)

class WirelessDataPoint(DataPoint):
    __swig_setmethods__ = {}
    for _s in [DataPoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WirelessDataPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [DataPoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WirelessDataPoint, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_WirelessDataPoint()
        try: self.this.append(this)
        except: self.this = this
    def channelId(self): return _mscl.WirelessDataPoint_channelId(self)
    def channelNumber(self): return _mscl.WirelessDataPoint_channelNumber(self)
    def channelName(self): return _mscl.WirelessDataPoint_channelName(self)
    __swig_destroy__ = _mscl.delete_WirelessDataPoint
    __del__ = lambda self : None;
WirelessDataPoint_swigregister = _mscl.WirelessDataPoint_swigregister
WirelessDataPoint_swigregister(WirelessDataPoint)

class DataSweep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSweep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSweep, name)
    __repr__ = _swig_repr
    samplingType_NonSync = _mscl.DataSweep_samplingType_NonSync
    samplingType_NonSync_Buffered = _mscl.DataSweep_samplingType_NonSync_Buffered
    samplingType_SyncSampling = _mscl.DataSweep_samplingType_SyncSampling
    samplingType_SyncSampling_Burst = _mscl.DataSweep_samplingType_SyncSampling_Burst
    samplingType_AsyncDigital = _mscl.DataSweep_samplingType_AsyncDigital
    samplingType_AsyncDigitalAnalog = _mscl.DataSweep_samplingType_AsyncDigitalAnalog
    samplingType_SHM = _mscl.DataSweep_samplingType_SHM
    def __init__(self): 
        this = _mscl.new_DataSweep()
        try: self.this.append(this)
        except: self.this = this
    def timestamp(self): return _mscl.DataSweep_timestamp(self)
    def nanoseconds(self): return _mscl.DataSweep_nanoseconds(self)
    def tick(self): return _mscl.DataSweep_tick(self)
    def sampleRate(self): return _mscl.DataSweep_sampleRate(self)
    def nodeAddress(self): return _mscl.DataSweep_nodeAddress(self)
    def data(self): return _mscl.DataSweep_data(self)
    def samplingType(self): return _mscl.DataSweep_samplingType(self)
    def nodeRssi(self): return _mscl.DataSweep_nodeRssi(self)
    def baseRssi(self): return _mscl.DataSweep_baseRssi(self)
    def frequency(self): return _mscl.DataSweep_frequency(self)
    __swig_destroy__ = _mscl.delete_DataSweep
    __del__ = lambda self : None;
DataSweep_swigregister = _mscl.DataSweep_swigregister
DataSweep_swigregister(DataSweep)

class BaseStationAnalogPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseStationAnalogPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseStationAnalogPair, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_BaseStationAnalogPair()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["Float"] = lambda x: _mscl.BaseStationAnalogPair_Float
    if _newclass:Float = staticmethod(_mscl.BaseStationAnalogPair_Float)
    __swig_getmethods__["NonFloat"] = lambda x: _mscl.BaseStationAnalogPair_NonFloat
    if _newclass:NonFloat = staticmethod(_mscl.BaseStationAnalogPair_NonFloat)
    def nodeAddress(self, *args): return _mscl.BaseStationAnalogPair_nodeAddress(self, *args)
    def nodeChannel(self, *args): return _mscl.BaseStationAnalogPair_nodeChannel(self, *args)
    def expectFloatData(self, *args): return _mscl.BaseStationAnalogPair_expectFloatData(self, *args)
    def outputVal_0V(self, *args): return _mscl.BaseStationAnalogPair_outputVal_0V(self, *args)
    def outputVal_3V(self, *args): return _mscl.BaseStationAnalogPair_outputVal_3V(self, *args)
    __swig_destroy__ = _mscl.delete_BaseStationAnalogPair
    __del__ = lambda self : None;
BaseStationAnalogPair_swigregister = _mscl.BaseStationAnalogPair_swigregister
BaseStationAnalogPair_swigregister(BaseStationAnalogPair)
cvar = _mscl.cvar
BaseStationAnalogPair.CHANNEL_NOT_FLOAT = _mscl.cvar.BaseStationAnalogPair_CHANNEL_NOT_FLOAT

def BaseStationAnalogPair_Float(*args):
  return _mscl.BaseStationAnalogPair_Float(*args)
BaseStationAnalogPair_Float = _mscl.BaseStationAnalogPair_Float

def BaseStationAnalogPair_NonFloat(*args):
  return _mscl.BaseStationAnalogPair_NonFloat(*args)
BaseStationAnalogPair_NonFloat = _mscl.BaseStationAnalogPair_NonFloat

class BaseStationButton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseStationButton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseStationButton, name)
    __repr__ = _swig_repr
    btn_nodeSleep = _mscl.BaseStationButton_btn_nodeSleep
    btn_nodeStop = _mscl.BaseStationButton_btn_nodeStop
    btn_enableBeacon = _mscl.BaseStationButton_btn_enableBeacon
    btn_disableBeacon = _mscl.BaseStationButton_btn_disableBeacon
    btn_nodeNonSyncSampling = _mscl.BaseStationButton_btn_nodeNonSyncSampling
    btn_nodeSyncSampling = _mscl.BaseStationButton_btn_nodeSyncSampling
    btn_nodeArmedDatalogging = _mscl.BaseStationButton_btn_nodeArmedDatalogging
    btn_cyclePower = _mscl.BaseStationButton_btn_cyclePower
    btn_disabled = _mscl.BaseStationButton_btn_disabled
    def __init__(self, *args): 
        this = _mscl.new_BaseStationButton(*args)
        try: self.this.append(this)
        except: self.this = this
    def command(self, *args): return _mscl.BaseStationButton_command(self, *args)
    def nodeAddress(self, *args): return _mscl.BaseStationButton_nodeAddress(self, *args)
    __swig_destroy__ = _mscl.delete_BaseStationButton
    __del__ = lambda self : None;
BaseStationButton_swigregister = _mscl.BaseStationButton_swigregister
BaseStationButton_swigregister(BaseStationButton)

class BaseStationConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseStationConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseStationConfig, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_BaseStationConfig()
        try: self.this.append(this)
        except: self.this = this
    def transmitPower(self, *args): return _mscl.BaseStationConfig_transmitPower(self, *args)
    def buttonLongPress(self, *args): return _mscl.BaseStationConfig_buttonLongPress(self, *args)
    def buttonShortPress(self, *args): return _mscl.BaseStationConfig_buttonShortPress(self, *args)
    def analogPairingEnable(self, *args): return _mscl.BaseStationConfig_analogPairingEnable(self, *args)
    def analogTimeoutTime(self, *args): return _mscl.BaseStationConfig_analogTimeoutTime(self, *args)
    def analogTimeoutVoltage(self, *args): return _mscl.BaseStationConfig_analogTimeoutVoltage(self, *args)
    def analogExceedanceEnable(self, *args): return _mscl.BaseStationConfig_analogExceedanceEnable(self, *args)
    def analogPairing(self, *args): return _mscl.BaseStationConfig_analogPairing(self, *args)
    __swig_destroy__ = _mscl.delete_BaseStationConfig
    __del__ = lambda self : None;
BaseStationConfig_swigregister = _mscl.BaseStationConfig_swigregister
BaseStationConfig_swigregister(BaseStationConfig)

class BeaconStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BeaconStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BeaconStatus, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_BeaconStatus(*args)
        try: self.this.append(this)
        except: self.this = this
    def enabled(self): return _mscl.BeaconStatus_enabled(self)
    def timestamp(self): return _mscl.BeaconStatus_timestamp(self)
    __swig_destroy__ = _mscl.delete_BeaconStatus
    __del__ = lambda self : None;
BeaconStatus_swigregister = _mscl.BeaconStatus_swigregister
BeaconStatus_swigregister(BeaconStatus)

class BaseStation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseStation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseStation, name)
    __repr__ = _swig_repr
    BASE_COMMANDS_DEFAULT_TIMEOUT = _mscl.BaseStation_BASE_COMMANDS_DEFAULT_TIMEOUT
    NODE_COMMANDS_DEFAULT_TIMEOUT = _mscl.BaseStation_NODE_COMMANDS_DEFAULT_TIMEOUT
    BROADCAST_NODE_ADDRESS = _mscl.BaseStation_BROADCAST_NODE_ADDRESS
    def __init__(self, *args): 
        this = _mscl.new_BaseStation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_BaseStation
    __del__ = lambda self : None;
    __swig_getmethods__["deviceName"] = lambda x: _mscl.BaseStation_deviceName
    if _newclass:deviceName = staticmethod(_mscl.BaseStation_deviceName)
    def features(self): return _mscl.BaseStation_features(self)
    def lastCommunicationTime(self): return _mscl.BaseStation_lastCommunicationTime(self)
    def readWriteRetries(self, *args): return _mscl.BaseStation_readWriteRetries(self, *args)
    def useEepromCache(self, *args): return _mscl.BaseStation_useEepromCache(self, *args)
    def clearEepromCache(self): return _mscl.BaseStation_clearEepromCache(self)
    def frequency(self): return _mscl.BaseStation_frequency(self)
    def firmwareVersion(self): return _mscl.BaseStation_firmwareVersion(self)
    def model(self): return _mscl.BaseStation_model(self)
    def serial(self): return _mscl.BaseStation_serial(self)
    def name(self): return _mscl.BaseStation_name(self)
    def microcontroller(self): return _mscl.BaseStation_microcontroller(self)
    def getNextData(self, timeout=0): return _mscl.BaseStation_getNextData(self, timeout)
    def getData(self, timeout=0, maxSweeps=0): return _mscl.BaseStation_getData(self, timeout, maxSweeps)
    def totalData(self): return _mscl.BaseStation_totalData(self)
    def getNodeDiscoveries(self): return _mscl.BaseStation_getNodeDiscoveries(self)
    def baseCommandsTimeout(self, *args): return _mscl.BaseStation_baseCommandsTimeout(self, *args)
    def nodeCommandsTimeout(self, *args): return _mscl.BaseStation_nodeCommandsTimeout(self, *args)
    def ping(self): return _mscl.BaseStation_ping(self)
    def readEeprom(self, *args): return _mscl.BaseStation_readEeprom(self, *args)
    def writeEeprom(self, *args): return _mscl.BaseStation_writeEeprom(self, *args)
    def enableBeacon(self, *args): return _mscl.BaseStation_enableBeacon(self, *args)
    def disableBeacon(self): return _mscl.BaseStation_disableBeacon(self)
    def beaconStatus(self): return _mscl.BaseStation_beaconStatus(self)
    def cyclePower(self): return _mscl.BaseStation_cyclePower(self)
    def resetRadio(self): return _mscl.BaseStation_resetRadio(self)
    def changeFrequency(self, *args): return _mscl.BaseStation_changeFrequency(self, *args)
    def verifyConfig(self, *args): return _mscl.BaseStation_verifyConfig(self, *args)
    def applyConfig(self, *args): return _mscl.BaseStation_applyConfig(self, *args)
    def getTransmitPower(self): return _mscl.BaseStation_getTransmitPower(self)
    def getButtonLongPress(self, *args): return _mscl.BaseStation_getButtonLongPress(self, *args)
    def getButtonShortPress(self, *args): return _mscl.BaseStation_getButtonShortPress(self, *args)
    def getAnalogPairingEnabled(self): return _mscl.BaseStation_getAnalogPairingEnabled(self)
    def getAnalogTimeoutTime(self): return _mscl.BaseStation_getAnalogTimeoutTime(self)
    def getAnalogTimeoutVoltage(self): return _mscl.BaseStation_getAnalogTimeoutVoltage(self)
    def getAnalogExceedanceEnabled(self): return _mscl.BaseStation_getAnalogExceedanceEnabled(self)
    def getAnalogPair(self, *args): return _mscl.BaseStation_getAnalogPair(self, *args)
BaseStation_swigregister = _mscl.BaseStation_swigregister
BaseStation_swigregister(BaseStation)

def BaseStation_deviceName(*args):
  return _mscl.BaseStation_deviceName(*args)
BaseStation_deviceName = _mscl.BaseStation_deviceName

class LoggedDataSweep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoggedDataSweep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoggedDataSweep, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_LoggedDataSweep(*args)
        try: self.this.append(this)
        except: self.this = this
    def timestamp(self): return _mscl.LoggedDataSweep_timestamp(self)
    def nanoseconds(self): return _mscl.LoggedDataSweep_nanoseconds(self)
    def tick(self): return _mscl.LoggedDataSweep_tick(self)
    def data(self): return _mscl.LoggedDataSweep_data(self)
    __swig_destroy__ = _mscl.delete_LoggedDataSweep
    __del__ = lambda self : None;
LoggedDataSweep_swigregister = _mscl.LoggedDataSweep_swigregister
LoggedDataSweep_swigregister(LoggedDataSweep)

class RadioFeatures(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadioFeatures, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadioFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_RadioFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    def extendedRange(self): return _mscl.RadioFeatures_extendedRange(self)
    __swig_destroy__ = _mscl.delete_RadioFeatures
    __del__ = lambda self : None;
RadioFeatures_swigregister = _mscl.RadioFeatures_swigregister
RadioFeatures_swigregister(RadioFeatures)

class WirelessNodeConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WirelessNodeConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WirelessNodeConfig, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_WirelessNodeConfig()
        try: self.this.append(this)
        except: self.this = this
    def defaultMode(self, *args): return _mscl.WirelessNodeConfig_defaultMode(self, *args)
    def inactivityTimeout(self, *args): return _mscl.WirelessNodeConfig_inactivityTimeout(self, *args)
    def checkRadioInterval(self, *args): return _mscl.WirelessNodeConfig_checkRadioInterval(self, *args)
    def transmitPower(self, *args): return _mscl.WirelessNodeConfig_transmitPower(self, *args)
    def samplingMode(self, *args): return _mscl.WirelessNodeConfig_samplingMode(self, *args)
    def sampleRate(self, *args): return _mscl.WirelessNodeConfig_sampleRate(self, *args)
    def activeChannels(self, *args): return _mscl.WirelessNodeConfig_activeChannels(self, *args)
    def numSweeps(self, *args): return _mscl.WirelessNodeConfig_numSweeps(self, *args)
    def unlimitedDuration(self, *args): return _mscl.WirelessNodeConfig_unlimitedDuration(self, *args)
    def dataFormat(self, *args): return _mscl.WirelessNodeConfig_dataFormat(self, *args)
    def dataCollectionMethod(self, *args): return _mscl.WirelessNodeConfig_dataCollectionMethod(self, *args)
    def timeBetweenBursts(self, *args): return _mscl.WirelessNodeConfig_timeBetweenBursts(self, *args)
    def lostBeaconTimeout(self, *args): return _mscl.WirelessNodeConfig_lostBeaconTimeout(self, *args)
    def hardwareGain(self, *args): return _mscl.WirelessNodeConfig_hardwareGain(self, *args)
    def hardwareOffset(self, *args): return _mscl.WirelessNodeConfig_hardwareOffset(self, *args)
    def linearEquation(self, *args): return _mscl.WirelessNodeConfig_linearEquation(self, *args)
    def unit(self, *args): return _mscl.WirelessNodeConfig_unit(self, *args)
    def equationType(self, *args): return _mscl.WirelessNodeConfig_equationType(self, *args)
    def filterSettlingTime(self, *args): return _mscl.WirelessNodeConfig_filterSettlingTime(self, *args)
    def thermocoupleType(self, *args): return _mscl.WirelessNodeConfig_thermocoupleType(self, *args)
    def fatigueOptions(self, *args): return _mscl.WirelessNodeConfig_fatigueOptions(self, *args)
    def histogramOptions(self, *args): return _mscl.WirelessNodeConfig_histogramOptions(self, *args)
    __swig_destroy__ = _mscl.delete_WirelessNodeConfig
    __del__ = lambda self : None;
WirelessNodeConfig_swigregister = _mscl.WirelessNodeConfig_swigregister
WirelessNodeConfig_swigregister(WirelessNodeConfig)

class AutoCalResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoCalResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoCalResult, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_AutoCalResult
    __del__ = lambda self : None;
    def completionFlag(self): return _mscl.AutoCalResult_completionFlag(self)
AutoCalResult_swigregister = _mscl.AutoCalResult_swigregister
AutoCalResult_swigregister(AutoCalResult)

class AutoCalResult_shmLink(AutoCalResult):
    __swig_setmethods__ = {}
    for _s in [AutoCalResult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoCalResult_shmLink, name, value)
    __swig_getmethods__ = {}
    for _s in [AutoCalResult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AutoCalResult_shmLink, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_AutoCalResult_shmLink()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_AutoCalResult_shmLink
    __del__ = lambda self : None;
    def errorFlagCh1(self): return _mscl.AutoCalResult_shmLink_errorFlagCh1(self)
    def errorFlagCh2(self): return _mscl.AutoCalResult_shmLink_errorFlagCh2(self)
    def errorFlagCh3(self): return _mscl.AutoCalResult_shmLink_errorFlagCh3(self)
    def offsetCh1(self): return _mscl.AutoCalResult_shmLink_offsetCh1(self)
    def offsetCh2(self): return _mscl.AutoCalResult_shmLink_offsetCh2(self)
    def offsetCh3(self): return _mscl.AutoCalResult_shmLink_offsetCh3(self)
    def temperature(self): return _mscl.AutoCalResult_shmLink_temperature(self)
AutoCalResult_shmLink_swigregister = _mscl.AutoCalResult_shmLink_swigregister
AutoCalResult_shmLink_swigregister(AutoCalResult_shmLink)

class PingResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PingResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PingResponse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_PingResponse()
        try: self.this.append(this)
        except: self.this = this
    def success(self): return _mscl.PingResponse_success(self)
    def nodeRssi(self): return _mscl.PingResponse_nodeRssi(self)
    def baseRssi(self): return _mscl.PingResponse_baseRssi(self)
    __swig_destroy__ = _mscl.delete_PingResponse
    __del__ = lambda self : None;
PingResponse_swigregister = _mscl.PingResponse_swigregister
PingResponse_swigregister(PingResponse)

class SetToIdleStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetToIdleStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetToIdleStatus, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    setToIdleResult_success = _mscl.SetToIdleStatus_setToIdleResult_success
    setToIdleResult_canceled = _mscl.SetToIdleStatus_setToIdleResult_canceled
    setToIdleResult_failed = _mscl.SetToIdleStatus_setToIdleResult_failed
    setToIdleResult_notCompleted = _mscl.SetToIdleStatus_setToIdleResult_notCompleted
    def result(self): return _mscl.SetToIdleStatus_result(self)
    def complete(self, timeout=10): return _mscl.SetToIdleStatus_complete(self, timeout)
    def cancel(self): return _mscl.SetToIdleStatus_cancel(self)
    __swig_destroy__ = _mscl.delete_SetToIdleStatus
    __del__ = lambda self : None;
SetToIdleStatus_swigregister = _mscl.SetToIdleStatus_swigregister
SetToIdleStatus_swigregister(SetToIdleStatus)

class WirelessNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WirelessNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WirelessNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_WirelessNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_WirelessNode
    __del__ = lambda self : None;
    __swig_getmethods__["deviceName"] = lambda x: _mscl.WirelessNode_deviceName
    if _newclass:deviceName = staticmethod(_mscl.WirelessNode_deviceName)
    def features(self): return _mscl.WirelessNode_features(self)
    def lastCommunicationTime(self): return _mscl.WirelessNode_lastCommunicationTime(self)
    def setBaseStation(self, *args): return _mscl.WirelessNode_setBaseStation(self, *args)
    def getBaseStation(self): return _mscl.WirelessNode_getBaseStation(self)
    def hasBaseStation(self, *args): return _mscl.WirelessNode_hasBaseStation(self, *args)
    def useGroupRead(self, *args): return _mscl.WirelessNode_useGroupRead(self, *args)
    def readWriteRetries(self, *args): return _mscl.WirelessNode_readWriteRetries(self, *args)
    def useEepromCache(self, *args): return _mscl.WirelessNode_useEepromCache(self, *args)
    def clearEepromCache(self): return _mscl.WirelessNode_clearEepromCache(self)
    def nodeAddress(self): return _mscl.WirelessNode_nodeAddress(self)
    def frequency(self): return _mscl.WirelessNode_frequency(self)
    def firmwareVersion(self): return _mscl.WirelessNode_firmwareVersion(self)
    def model(self): return _mscl.WirelessNode_model(self)
    def serial(self): return _mscl.WirelessNode_serial(self)
    def name(self): return _mscl.WirelessNode_name(self)
    def microcontroller(self): return _mscl.WirelessNode_microcontroller(self)
    def radioFeatures(self): return _mscl.WirelessNode_radioFeatures(self)
    def dataStorageSize(self): return _mscl.WirelessNode_dataStorageSize(self)
    def ping(self): return _mscl.WirelessNode_ping(self)
    def sleep(self): return _mscl.WirelessNode_sleep(self)
    def cyclePower(self): return _mscl.WirelessNode_cyclePower(self)
    def resetRadio(self): return _mscl.WirelessNode_resetRadio(self)
    def changeFrequency(self, *args): return _mscl.WirelessNode_changeFrequency(self, *args)
    def setToIdle(self): return _mscl.WirelessNode_setToIdle(self)
    def erase(self): return _mscl.WirelessNode_erase(self)
    def startNonSyncSampling(self): return _mscl.WirelessNode_startNonSyncSampling(self)
    def clearHistogram(self): return _mscl.WirelessNode_clearHistogram(self)
    def autoBalance(self, *args): return _mscl.WirelessNode_autoBalance(self, *args)
    def autoCal_shmLink(self): return _mscl.WirelessNode_autoCal_shmLink(self)
    def readEeprom(self, *args): return _mscl.WirelessNode_readEeprom(self, *args)
    def writeEeprom(self, *args): return _mscl.WirelessNode_writeEeprom(self, *args)
    def verifyConfig(self, *args): return _mscl.WirelessNode_verifyConfig(self, *args)
    def applyConfig(self, *args): return _mscl.WirelessNode_applyConfig(self, *args)
    def getNumDatalogSessions(self): return _mscl.WirelessNode_getNumDatalogSessions(self)
    def getDefaultMode(self): return _mscl.WirelessNode_getDefaultMode(self)
    def getInactivityTimeout(self): return _mscl.WirelessNode_getInactivityTimeout(self)
    def getCheckRadioInterval(self): return _mscl.WirelessNode_getCheckRadioInterval(self)
    def getTransmitPower(self): return _mscl.WirelessNode_getTransmitPower(self)
    def getSamplingMode(self): return _mscl.WirelessNode_getSamplingMode(self)
    def getActiveChannels(self): return _mscl.WirelessNode_getActiveChannels(self)
    def getSampleRate(self): return _mscl.WirelessNode_getSampleRate(self)
    def getNumSweeps(self): return _mscl.WirelessNode_getNumSweeps(self)
    def getUnlimitedDuration(self): return _mscl.WirelessNode_getUnlimitedDuration(self)
    def getDataFormat(self): return _mscl.WirelessNode_getDataFormat(self)
    def getDataCollectionMethod(self): return _mscl.WirelessNode_getDataCollectionMethod(self)
    def getTimeBetweenBursts(self): return _mscl.WirelessNode_getTimeBetweenBursts(self)
    def getLostBeaconTimeout(self): return _mscl.WirelessNode_getLostBeaconTimeout(self)
    def getHardwareGain(self, *args): return _mscl.WirelessNode_getHardwareGain(self, *args)
    def getHardwareOffset(self, *args): return _mscl.WirelessNode_getHardwareOffset(self, *args)
    def getLinearEquation(self, *args): return _mscl.WirelessNode_getLinearEquation(self, *args)
    def getUnit(self, *args): return _mscl.WirelessNode_getUnit(self, *args)
    def getEquationType(self, *args): return _mscl.WirelessNode_getEquationType(self, *args)
    def getFilterSettlingTime(self, *args): return _mscl.WirelessNode_getFilterSettlingTime(self, *args)
    def getThermocoupleType(self, *args): return _mscl.WirelessNode_getThermocoupleType(self, *args)
    def getFatigueOptions(self): return _mscl.WirelessNode_getFatigueOptions(self)
    def getHistogramOptions(self): return _mscl.WirelessNode_getHistogramOptions(self)
WirelessNode_swigregister = _mscl.WirelessNode_swigregister
WirelessNode_swigregister(WirelessNode)

def WirelessNode_deviceName(*args):
  return _mscl.WirelessNode_deviceName(*args)
WirelessNode_deviceName = _mscl.WirelessNode_deviceName

class DatalogDownloader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatalogDownloader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatalogDownloader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_DatalogDownloader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_DatalogDownloader
    __del__ = lambda self : None;
    def complete(self): return _mscl.DatalogDownloader_complete(self)
    def getNextData(self): return _mscl.DatalogDownloader_getNextData(self)
    def startOfSession(self): return _mscl.DatalogDownloader_startOfSession(self)
    def triggerType(self): return _mscl.DatalogDownloader_triggerType(self)
    def totalSweeps(self): return _mscl.DatalogDownloader_totalSweeps(self)
    def sessionIndex(self): return _mscl.DatalogDownloader_sessionIndex(self)
    def sampleRate(self): return _mscl.DatalogDownloader_sampleRate(self)
    def userString(self): return _mscl.DatalogDownloader_userString(self)
DatalogDownloader_swigregister = _mscl.DatalogDownloader_swigregister
DatalogDownloader_swigregister(DatalogDownloader)

class ArmedDataloggingNetwork(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArmedDataloggingNetwork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArmedDataloggingNetwork, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_ArmedDataloggingNetwork(*args)
        try: self.this.append(this)
        except: self.this = this
    def addNode(self, *args): return _mscl.ArmedDataloggingNetwork_addNode(self, *args)
    def removeNode(self, *args): return _mscl.ArmedDataloggingNetwork_removeNode(self, *args)
    def startSampling(self): return _mscl.ArmedDataloggingNetwork_startSampling(self)
    __swig_destroy__ = _mscl.delete_ArmedDataloggingNetwork
    __del__ = lambda self : None;
ArmedDataloggingNetwork_swigregister = _mscl.ArmedDataloggingNetwork_swigregister
ArmedDataloggingNetwork_swigregister(ArmedDataloggingNetwork)

class SyncNetworkInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SyncNetworkInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SyncNetworkInfo, name)
    __repr__ = _swig_repr
    status_OK = _mscl.SyncNetworkInfo_status_OK
    status_PoorCommunication = _mscl.SyncNetworkInfo_status_PoorCommunication
    status_DoesNotFit = _mscl.SyncNetworkInfo_status_DoesNotFit
    status_Contention = _mscl.SyncNetworkInfo_status_Contention
    def __init__(self, *args): 
        this = _mscl.new_SyncNetworkInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def status(self): return _mscl.SyncNetworkInfo_status(self)
    def configurationApplied(self): return _mscl.SyncNetworkInfo_configurationApplied(self)
    def percentBandwidth(self): return _mscl.SyncNetworkInfo_percentBandwidth(self)
    def tdmaAddress(self): return _mscl.SyncNetworkInfo_tdmaAddress(self)
    def maxTdmaAddress(self): return _mscl.SyncNetworkInfo_maxTdmaAddress(self)
    def transmissionPerGroup(self): return _mscl.SyncNetworkInfo_transmissionPerGroup(self)
    def groupSize(self): return _mscl.SyncNetworkInfo_groupSize(self)
    __swig_destroy__ = _mscl.delete_SyncNetworkInfo
    __del__ = lambda self : None;
SyncNetworkInfo_swigregister = _mscl.SyncNetworkInfo_swigregister
SyncNetworkInfo_swigregister(SyncNetworkInfo)

class SyncSamplingNetwork(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SyncSamplingNetwork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SyncSamplingNetwork, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_SyncSamplingNetwork(*args)
        try: self.this.append(this)
        except: self.this = this
    def addNode(self, *args): return _mscl.SyncSamplingNetwork_addNode(self, *args)
    def removeNode(self, *args): return _mscl.SyncSamplingNetwork_removeNode(self, *args)
    def percentBandwidth(self): return _mscl.SyncSamplingNetwork_percentBandwidth(self)
    def ok(self): return _mscl.SyncSamplingNetwork_ok(self)
    def refresh(self): return _mscl.SyncSamplingNetwork_refresh(self)
    def lossless(self, *args): return _mscl.SyncSamplingNetwork_lossless(self, *args)
    def highCapacity(self, *args): return _mscl.SyncSamplingNetwork_highCapacity(self, *args)
    def applyConfiguration(self): return _mscl.SyncSamplingNetwork_applyConfiguration(self)
    def startSampling(self, *args): return _mscl.SyncSamplingNetwork_startSampling(self, *args)
    def startSampling_noBeacon(self): return _mscl.SyncSamplingNetwork_startSampling_noBeacon(self)
    def getNodeNetworkInfo(self, *args): return _mscl.SyncSamplingNetwork_getNodeNetworkInfo(self, *args)
    def setPendingConfig(self, *args): return _mscl.SyncSamplingNetwork_setPendingConfig(self, *args)
    def clearPendingConfig(self, *args): return _mscl.SyncSamplingNetwork_clearPendingConfig(self, *args)
    def clearAllPendingConfigs(self): return _mscl.SyncSamplingNetwork_clearAllPendingConfigs(self)
    __swig_destroy__ = _mscl.delete_SyncSamplingNetwork
    __del__ = lambda self : None;
SyncSamplingNetwork_swigregister = _mscl.SyncSamplingNetwork_swigregister
SyncSamplingNetwork_swigregister(SyncSamplingNetwork)

class NodeFeatures(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeFeatures, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeFeatures, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_NodeFeatures
    __del__ = lambda self : None;
    def normalizeNumSweeps(self, *args): return _mscl.NodeFeatures_normalizeNumSweeps(self, *args)
    def normalizeTimeBetweenBursts(self, *args): return _mscl.NodeFeatures_normalizeTimeBetweenBursts(self, *args)
    def channels(self): return _mscl.NodeFeatures_channels(self)
    def channelGroups(self): return _mscl.NodeFeatures_channelGroups(self)
    def supportsChannelSetting(self, *args): return _mscl.NodeFeatures_supportsChannelSetting(self, *args)
    def supportsHardwareGain(self): return _mscl.NodeFeatures_supportsHardwareGain(self)
    def supportsFilterSettlingTime(self): return _mscl.NodeFeatures_supportsFilterSettlingTime(self)
    def supportsThermocoupleType(self): return _mscl.NodeFeatures_supportsThermocoupleType(self)
    def supportsFatigueConfig(self): return _mscl.NodeFeatures_supportsFatigueConfig(self)
    def supportsYoungsModConfig(self): return _mscl.NodeFeatures_supportsYoungsModConfig(self)
    def supportsPoissonsRatioConfig(self): return _mscl.NodeFeatures_supportsPoissonsRatioConfig(self)
    def supportsFatigueRawModeConfig(self): return _mscl.NodeFeatures_supportsFatigueRawModeConfig(self)
    def supportsHistogramConfig(self): return _mscl.NodeFeatures_supportsHistogramConfig(self)
    def supportsHistogramRateConfig(self): return _mscl.NodeFeatures_supportsHistogramRateConfig(self)
    def supportsAutoBalance(self, *args): return _mscl.NodeFeatures_supportsAutoBalance(self, *args)
    def supportsAutoCal(self): return _mscl.NodeFeatures_supportsAutoCal(self)
    def supportsChannel(self, *args): return _mscl.NodeFeatures_supportsChannel(self, *args)
    def supportsSamplingMode(self, *args): return _mscl.NodeFeatures_supportsSamplingMode(self, *args)
    def supportsSampleRate(self, *args): return _mscl.NodeFeatures_supportsSampleRate(self, *args)
    def supportsDataFormat(self, *args): return _mscl.NodeFeatures_supportsDataFormat(self, *args)
    def supportsDefaultMode(self, *args): return _mscl.NodeFeatures_supportsDefaultMode(self, *args)
    def supportsDataCollectionMethod(self, *args): return _mscl.NodeFeatures_supportsDataCollectionMethod(self, *args)
    def supportsTransmitPower(self, *args): return _mscl.NodeFeatures_supportsTransmitPower(self, *args)
    def maxSampleRate(self, *args): return _mscl.NodeFeatures_maxSampleRate(self, *args)
    def maxFilterSettlingTime(self, *args): return _mscl.NodeFeatures_maxFilterSettlingTime(self, *args)
    def minInactivityTimeout(self): return _mscl.NodeFeatures_minInactivityTimeout(self)
    def minLostBeaconTimeout(self): return _mscl.NodeFeatures_minLostBeaconTimeout(self)
    def maxLostBeaconTimeout(self): return _mscl.NodeFeatures_maxLostBeaconTimeout(self)
    def minCheckRadioInterval(self): return _mscl.NodeFeatures_minCheckRadioInterval(self)
    def maxCheckRadioInterval(self): return _mscl.NodeFeatures_maxCheckRadioInterval(self)
    def minSweeps(self): return _mscl.NodeFeatures_minSweeps(self)
    def maxSweeps(self, *args): return _mscl.NodeFeatures_maxSweeps(self, *args)
    def maxSweepsPerBurst(self, *args): return _mscl.NodeFeatures_maxSweepsPerBurst(self, *args)
    def minTimeBetweenBursts(self, *args): return _mscl.NodeFeatures_minTimeBetweenBursts(self, *args)
    def minHardwareGain(self): return _mscl.NodeFeatures_minHardwareGain(self)
    def maxHardwareGain(self): return _mscl.NodeFeatures_maxHardwareGain(self)
    def normalizeHardwareGain(self, *args): return _mscl.NodeFeatures_normalizeHardwareGain(self, *args)
    def numDamageAngles(self): return _mscl.NodeFeatures_numDamageAngles(self)
    def numSnCurveSegments(self): return _mscl.NodeFeatures_numSnCurveSegments(self)
    def defaultModes(self): return _mscl.NodeFeatures_defaultModes(self)
    def dataCollectionMethods(self): return _mscl.NodeFeatures_dataCollectionMethods(self)
    def dataFormats(self): return _mscl.NodeFeatures_dataFormats(self)
    def samplingModes(self): return _mscl.NodeFeatures_samplingModes(self)
    def sampleRates(self, *args): return _mscl.NodeFeatures_sampleRates(self, *args)
    def transmitPowers(self): return _mscl.NodeFeatures_transmitPowers(self)
    def histogramTransmitRates(self): return _mscl.NodeFeatures_histogramTransmitRates(self)
NodeFeatures_swigregister = _mscl.NodeFeatures_swigregister
NodeFeatures_swigregister(NodeFeatures)

class BaseStationFeatures(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseStationFeatures, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseStationFeatures, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_BaseStationFeatures
    __del__ = lambda self : None;
    def supportsTransmitPower(self, *args): return _mscl.BaseStationFeatures_supportsTransmitPower(self, *args)
    def supportsButtons(self): return _mscl.BaseStationFeatures_supportsButtons(self)
    def supportsAnalogPairing(self): return _mscl.BaseStationFeatures_supportsAnalogPairing(self)
    def supportsBeaconStatus(self): return _mscl.BaseStationFeatures_supportsBeaconStatus(self)
    def buttonCount(self): return _mscl.BaseStationFeatures_buttonCount(self)
    def analogPortCount(self): return _mscl.BaseStationFeatures_analogPortCount(self)
    def transmitPowers(self): return _mscl.BaseStationFeatures_transmitPowers(self)
BaseStationFeatures_swigregister = _mscl.BaseStationFeatures_swigregister
BaseStationFeatures_swigregister(BaseStationFeatures)

class InertialModels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialModels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialModels, name)
    __repr__ = _swig_repr
    node_3dm = _mscl.InertialModels_node_3dm
    node_fasA = _mscl.InertialModels_node_fasA
    node_3dm_gx2 = _mscl.InertialModels_node_3dm_gx2
    node_3dm_dh3 = _mscl.InertialModels_node_3dm_dh3
    node_3dm_gx3_15 = _mscl.InertialModels_node_3dm_gx3_15
    node_3dm_gx3_25 = _mscl.InertialModels_node_3dm_gx3_25
    node_3dm_gx3_35 = _mscl.InertialModels_node_3dm_gx3_35
    node_3dm_gx3_45 = _mscl.InertialModels_node_3dm_gx3_45
    node_3dm_rq1_45 = _mscl.InertialModels_node_3dm_rq1_45
    node_3dm_gx4_15 = _mscl.InertialModels_node_3dm_gx4_15
    node_3dm_gx4_25 = _mscl.InertialModels_node_3dm_gx4_25
    node_3dm_gx4_45 = _mscl.InertialModels_node_3dm_gx4_45
    def __init__(self): 
        this = _mscl.new_InertialModels()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_InertialModels
    __del__ = lambda self : None;
InertialModels_swigregister = _mscl.InertialModels_swigregister
InertialModels_swigregister(InertialModels)

class InertialTypes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialTypes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialTypes, name)
    __repr__ = _swig_repr
    CATEGORY_SENSOR = _mscl.InertialTypes_CATEGORY_SENSOR
    CATEGORY_GPS = _mscl.InertialTypes_CATEGORY_GPS
    CATEGORY_ESTFILTER = _mscl.InertialTypes_CATEGORY_ESTFILTER
    CMD_PING = _mscl.InertialTypes_CMD_PING
    CMD_SET_IDLE = _mscl.InertialTypes_CMD_SET_IDLE
    CMD_GET_DEVICE_INFO = _mscl.InertialTypes_CMD_GET_DEVICE_INFO
    CMD_GET_DESCRIPTOR_SETS = _mscl.InertialTypes_CMD_GET_DESCRIPTOR_SETS
    CMD_BUILT_IN_TEST = _mscl.InertialTypes_CMD_BUILT_IN_TEST
    CMD_RESUME = _mscl.InertialTypes_CMD_RESUME
    CMD_RESET = _mscl.InertialTypes_CMD_RESET
    CMD_POLL_SENSOR_DATA = _mscl.InertialTypes_CMD_POLL_SENSOR_DATA
    CMD_POLL_GPS_DATA = _mscl.InertialTypes_CMD_POLL_GPS_DATA
    CMD_POLL_EF_DATA = _mscl.InertialTypes_CMD_POLL_EF_DATA
    CMD_GET_SENSOR_RATE_BASE = _mscl.InertialTypes_CMD_GET_SENSOR_RATE_BASE
    CMD_GET_GPS_RATE_BASE = _mscl.InertialTypes_CMD_GET_GPS_RATE_BASE
    CMD_GET_EF_RATE_BASE = _mscl.InertialTypes_CMD_GET_EF_RATE_BASE
    CMD_SENSOR_MESSAGE_FORMAT = _mscl.InertialTypes_CMD_SENSOR_MESSAGE_FORMAT
    CMD_GPS_MESSAGE_FORMAT = _mscl.InertialTypes_CMD_GPS_MESSAGE_FORMAT
    CMD_EF_MESSAGE_FORMAT = _mscl.InertialTypes_CMD_EF_MESSAGE_FORMAT
    CMD_CONTINUOUS_DATA_STREAM = _mscl.InertialTypes_CMD_CONTINUOUS_DATA_STREAM
    CMD_SAVE_STARTUP_SETTINGS = _mscl.InertialTypes_CMD_SAVE_STARTUP_SETTINGS
    CMD_GPS_DYNAMICS_MODE = _mscl.InertialTypes_CMD_GPS_DYNAMICS_MODE
    CMD_SENSOR_SIG_COND_SETTINGS = _mscl.InertialTypes_CMD_SENSOR_SIG_COND_SETTINGS
    CMD_SENSOR_TIMESTAMP = _mscl.InertialTypes_CMD_SENSOR_TIMESTAMP
    CMD_ACCEL_BIAS = _mscl.InertialTypes_CMD_ACCEL_BIAS
    CMD_GYRO_BIAS = _mscl.InertialTypes_CMD_GYRO_BIAS
    CMD_CAP_GYRO_BIAS = _mscl.InertialTypes_CMD_CAP_GYRO_BIAS
    CMD_MAG_HARD_IRON_OFFSET = _mscl.InertialTypes_CMD_MAG_HARD_IRON_OFFSET
    CMD_MAG_SOFT_IRON_MATRIX = _mscl.InertialTypes_CMD_MAG_SOFT_IRON_MATRIX
    CMD_CF_REALIGN_UP = _mscl.InertialTypes_CMD_CF_REALIGN_UP
    CMD_CF_REALIGN_NORTH = _mscl.InertialTypes_CMD_CF_REALIGN_NORTH
    CMD_CONING_SCULLING = _mscl.InertialTypes_CMD_CONING_SCULLING
    CMD_UART_BAUD_RATE = _mscl.InertialTypes_CMD_UART_BAUD_RATE
    CMD_LOWPASS_FILTER_SETTINGS = _mscl.InertialTypes_CMD_LOWPASS_FILTER_SETTINGS
    CMD_DATA_STREAM_FORMAT = _mscl.InertialTypes_CMD_DATA_STREAM_FORMAT
    CMD_POWER_STATES = _mscl.InertialTypes_CMD_POWER_STATES
    CMD_GPS_STARTUP_SETTINGS = _mscl.InertialTypes_CMD_GPS_STARTUP_SETTINGS
    CMD_DEVICE_STATUS = _mscl.InertialTypes_CMD_DEVICE_STATUS
    CMD_EF_RESET_FILTER = _mscl.InertialTypes_CMD_EF_RESET_FILTER
    CMD_EF_INIT_ATTITUDE = _mscl.InertialTypes_CMD_EF_INIT_ATTITUDE
    CMD_EF_INIT_HEADING = _mscl.InertialTypes_CMD_EF_INIT_HEADING
    CMD_EF_INIT_ATTITUDE_FROM_AHRS = _mscl.InertialTypes_CMD_EF_INIT_ATTITUDE_FROM_AHRS
    CMD_EF_VEHIC_DYNAMICS_MODE = _mscl.InertialTypes_CMD_EF_VEHIC_DYNAMICS_MODE
    CMD_EF_SENS_VEHIC_FRAME_TRANS = _mscl.InertialTypes_CMD_EF_SENS_VEHIC_FRAME_TRANS
    CMD_EF_SENS_VEHIC_FRAME_OFFSET = _mscl.InertialTypes_CMD_EF_SENS_VEHIC_FRAME_OFFSET
    CMD_EF_ANTENNA_OFFSET = _mscl.InertialTypes_CMD_EF_ANTENNA_OFFSET
    CMD_EF_BIAS_EST_CTRL = _mscl.InertialTypes_CMD_EF_BIAS_EST_CTRL
    CMD_EF_GPS_SRC_CTRL = _mscl.InertialTypes_CMD_EF_GPS_SRC_CTRL
    CMD_EF_EXTERN_GPU_UPDATE = _mscl.InertialTypes_CMD_EF_EXTERN_GPU_UPDATE
    CMD_EF_EXTERN_HEADING_UPDATE = _mscl.InertialTypes_CMD_EF_EXTERN_HEADING_UPDATE
    CMD_EF_HEADING_UPDATE_CTRL = _mscl.InertialTypes_CMD_EF_HEADING_UPDATE_CTRL
    CMD_EF_AUTO_INIT_CTRL = _mscl.InertialTypes_CMD_EF_AUTO_INIT_CTRL
    CMD_EF_ACCEL_WHT_NSE_STD_DEV = _mscl.InertialTypes_CMD_EF_ACCEL_WHT_NSE_STD_DEV
    CMD_EF_GYRO_WHT_NSE_STD_DEV = _mscl.InertialTypes_CMD_EF_GYRO_WHT_NSE_STD_DEV
    CMD_EF_GYRO_BIAS_MODEL_PARAMS = _mscl.InertialTypes_CMD_EF_GYRO_BIAS_MODEL_PARAMS
    CMD_COMMUNICATION_MODE = _mscl.InertialTypes_CMD_COMMUNICATION_MODE
    CMD_HARDWARE_CTRL = _mscl.InertialTypes_CMD_HARDWARE_CTRL
    CH_FIELD_SENSOR_RAW_ACCEL_VEC = _mscl.InertialTypes_CH_FIELD_SENSOR_RAW_ACCEL_VEC
    CH_FIELD_SENSOR_RAW_GYRO_VEC = _mscl.InertialTypes_CH_FIELD_SENSOR_RAW_GYRO_VEC
    CH_FIELD_SENSOR_RAW_MAG_VEC = _mscl.InertialTypes_CH_FIELD_SENSOR_RAW_MAG_VEC
    CH_FIELD_SENSOR_SCALED_ACCEL_VEC = _mscl.InertialTypes_CH_FIELD_SENSOR_SCALED_ACCEL_VEC
    CH_FIELD_SENSOR_SCALED_GYRO_VEC = _mscl.InertialTypes_CH_FIELD_SENSOR_SCALED_GYRO_VEC
    CH_FIELD_SENSOR_SCALED_MAG_VEC = _mscl.InertialTypes_CH_FIELD_SENSOR_SCALED_MAG_VEC
    CH_FIELD_SENSOR_DELTA_THETA_VEC = _mscl.InertialTypes_CH_FIELD_SENSOR_DELTA_THETA_VEC
    CH_FIELD_SENSOR_DELTA_VELOCITY_VEC = _mscl.InertialTypes_CH_FIELD_SENSOR_DELTA_VELOCITY_VEC
    CH_FIELD_SENSOR_ORIENTATION_MATRIX = _mscl.InertialTypes_CH_FIELD_SENSOR_ORIENTATION_MATRIX
    CH_FIELD_SENSOR_ORIENTATION_QUATERNION = _mscl.InertialTypes_CH_FIELD_SENSOR_ORIENTATION_QUATERNION
    CH_FIELD_SENSOR_ORIENTATION_UPDATE_MATRIX = _mscl.InertialTypes_CH_FIELD_SENSOR_ORIENTATION_UPDATE_MATRIX
    CH_FIELD_SENSOR_EULER_ANGLES = _mscl.InertialTypes_CH_FIELD_SENSOR_EULER_ANGLES
    CH_FIELD_SENSOR_INTERNAL_TIMESTAMP = _mscl.InertialTypes_CH_FIELD_SENSOR_INTERNAL_TIMESTAMP
    CH_FIELD_SENSOR_BEACONED_TIMESTAMP = _mscl.InertialTypes_CH_FIELD_SENSOR_BEACONED_TIMESTAMP
    CH_FIELD_SENSOR_STABILIZED_MAG_VEC = _mscl.InertialTypes_CH_FIELD_SENSOR_STABILIZED_MAG_VEC
    CH_FIELD_SENSOR_STABILIZED_ACCEL_VEC = _mscl.InertialTypes_CH_FIELD_SENSOR_STABILIZED_ACCEL_VEC
    CH_FIELD_SENSOR_GPS_CORRELATION_TIMESTAMP = _mscl.InertialTypes_CH_FIELD_SENSOR_GPS_CORRELATION_TIMESTAMP
    CH_FIELD_SENSOR_SCALED_AMBIENT_PRESSURE = _mscl.InertialTypes_CH_FIELD_SENSOR_SCALED_AMBIENT_PRESSURE
    CH_FIELD_GPS_LLH_POSITION = _mscl.InertialTypes_CH_FIELD_GPS_LLH_POSITION
    CH_FIELD_GPS_ECEF_POSITION = _mscl.InertialTypes_CH_FIELD_GPS_ECEF_POSITION
    CH_FIELD_GPS_NED_VELOCITY = _mscl.InertialTypes_CH_FIELD_GPS_NED_VELOCITY
    CH_FIELD_GPS_ECEF_VELOCITY = _mscl.InertialTypes_CH_FIELD_GPS_ECEF_VELOCITY
    CH_FIELD_GPS_DOP = _mscl.InertialTypes_CH_FIELD_GPS_DOP
    CH_FIELD_GPS_UTC_TIME = _mscl.InertialTypes_CH_FIELD_GPS_UTC_TIME
    CH_FIELD_GPS_GPS_TIME = _mscl.InertialTypes_CH_FIELD_GPS_GPS_TIME
    CH_FIELD_GPS_CLOCK_INFO = _mscl.InertialTypes_CH_FIELD_GPS_CLOCK_INFO
    CH_FIELD_GPS_FIX_INFO = _mscl.InertialTypes_CH_FIELD_GPS_FIX_INFO
    CH_FIELD_GPS_SPACE_VEHICLE_INFO = _mscl.InertialTypes_CH_FIELD_GPS_SPACE_VEHICLE_INFO
    CH_FIELD_GPS_HARDWARE_STATUS = _mscl.InertialTypes_CH_FIELD_GPS_HARDWARE_STATUS
    CH_FIELD_GPS_DGPS_INFO = _mscl.InertialTypes_CH_FIELD_GPS_DGPS_INFO
    CH_FIELD_GPS_DGPS_CHANNEL_STATUS = _mscl.InertialTypes_CH_FIELD_GPS_DGPS_CHANNEL_STATUS
    CH_FIELD_ESTFILTER_ESTIMATED_LLH_POS = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_LLH_POS
    CH_FIELD_ESTFILTER_ESTIMATED_NED_VELOCITY = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_NED_VELOCITY
    CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_QUATERNION = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_QUATERNION
    CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_MATRIX = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_MATRIX
    CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_EULER = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_EULER
    CH_FIELD_ESTFILTER_ESTIMATED_GYRO_BIAS = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_GYRO_BIAS
    CH_FIELD_ESTFILTER_ESTIMATED_ACCEL_BIAS = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_ACCEL_BIAS
    CH_FIELD_ESTFILTER_ESTIMATED_LLH_UNCERT = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_LLH_UNCERT
    CH_FIELD_ESTFILTER_ESTIMATED_NED_UNCERT = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_NED_UNCERT
    CH_FIELD_ESTFILTER_ESTIMATED_ATT_UNCERT_EULER = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_ATT_UNCERT_EULER
    CH_FIELD_ESTFILTER_ESTIMATED_GYRO_BIAS_UNCERT = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_GYRO_BIAS_UNCERT
    CH_FIELD_ESTFILTER_ESTIMATED_ACCEL_BIAS_UNCERT = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_ACCEL_BIAS_UNCERT
    CH_FIELD_ESTFILTER_ESTIMATED_LINEAR_ACCEL = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_LINEAR_ACCEL
    CH_FIELD_ESTFILTER_ESTIMATED_ANGULAR_RATE = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_ANGULAR_RATE
    CH_FIELD_ESTFILTER_WGS84_LOC_GRAV_MAGNITUDE = _mscl.InertialTypes_CH_FIELD_ESTFILTER_WGS84_LOC_GRAV_MAGNITUDE
    CH_FIELD_ESTFILTER_FILTER_STATUS = _mscl.InertialTypes_CH_FIELD_ESTFILTER_FILTER_STATUS
    CH_FIELD_ESTFILTER_GPS_TIMESTAMP = _mscl.InertialTypes_CH_FIELD_ESTFILTER_GPS_TIMESTAMP
    CH_FIELD_ESTFILTER_ESTIMATED_ATT_UNCERT_QUAT = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_ATT_UNCERT_QUAT
    CH_FIELD_ESTFILTER_ESTIMATED_GRAVITY_VECTOR = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_GRAVITY_VECTOR
    CH_FIELD_ESTFILTER_HEADING_UPDATE_SOURCE = _mscl.InertialTypes_CH_FIELD_ESTFILTER_HEADING_UPDATE_SOURCE
    CH_FIELD_ESTFILTER_MAGNETIC_MODEL_SLN = _mscl.InertialTypes_CH_FIELD_ESTFILTER_MAGNETIC_MODEL_SLN
    CH_FIELD_ESTFILTER_ESTIMATED_GYRO_SCALE_FACTOR = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ESTIMATED_GYRO_SCALE_FACTOR
    CH_FIELD_ESTFILTER_ACCEL_SCALE_FACTOR = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ACCEL_SCALE_FACTOR
    CH_FIELD_ESTFILTER_GYRO_SCALE_FACTOR_UNCERT = _mscl.InertialTypes_CH_FIELD_ESTFILTER_GYRO_SCALE_FACTOR_UNCERT
    CH_FIELD_ESTFILTER_ACCEL_SCALE_FACTOR_UNCERT = _mscl.InertialTypes_CH_FIELD_ESTFILTER_ACCEL_SCALE_FACTOR_UNCERT
    CH_FIELD_ESTFILTER_COMPENSATED_ACCEL = _mscl.InertialTypes_CH_FIELD_ESTFILTER_COMPENSATED_ACCEL
    CH_FIELD_ESTFILTER_STD_ATMOSPHERE_MODEL = _mscl.InertialTypes_CH_FIELD_ESTFILTER_STD_ATMOSPHERE_MODEL
    CH_FIELD_ESTFILTER_PRESSURE_ALTITUDE = _mscl.InertialTypes_CH_FIELD_ESTFILTER_PRESSURE_ALTITUDE
    CH_FIELD_ESTFILTER_GPS_ANTENNA_CORRECTION = _mscl.InertialTypes_CH_FIELD_ESTFILTER_GPS_ANTENNA_CORRECTION
    CH_FIELD_ESTFILTER_GPS_ANTENNA_CORRECTION_UNCERT = _mscl.InertialTypes_CH_FIELD_ESTFILTER_GPS_ANTENNA_CORRECTION_UNCERT
    CH_UNKNOWN = _mscl.InertialTypes_CH_UNKNOWN
    CH_X = _mscl.InertialTypes_CH_X
    CH_Y = _mscl.InertialTypes_CH_Y
    CH_Z = _mscl.InertialTypes_CH_Z
    CH_MATRIX = _mscl.InertialTypes_CH_MATRIX
    CH_QUATERNION = _mscl.InertialTypes_CH_QUATERNION
    CH_ROLL = _mscl.InertialTypes_CH_ROLL
    CH_PITCH = _mscl.InertialTypes_CH_PITCH
    CH_YAW = _mscl.InertialTypes_CH_YAW
    CH_TICK = _mscl.InertialTypes_CH_TICK
    CH_TIMESTAMP = _mscl.InertialTypes_CH_TIMESTAMP
    CH_STATUS = _mscl.InertialTypes_CH_STATUS
    CH_TIME_OF_WEEK = _mscl.InertialTypes_CH_TIME_OF_WEEK
    CH_WEEK_NUMBER = _mscl.InertialTypes_CH_WEEK_NUMBER
    CH_LATITUDE = _mscl.InertialTypes_CH_LATITUDE
    CH_LONGITUDE = _mscl.InertialTypes_CH_LONGITUDE
    CH_HEIGHT_ABOVE_ELLIPSOID = _mscl.InertialTypes_CH_HEIGHT_ABOVE_ELLIPSOID
    CH_HEIGHT_ABOVE_MSL = _mscl.InertialTypes_CH_HEIGHT_ABOVE_MSL
    CH_HORIZONTAL_ACCURACY = _mscl.InertialTypes_CH_HORIZONTAL_ACCURACY
    CH_VERTICAL_ACCURACY = _mscl.InertialTypes_CH_VERTICAL_ACCURACY
    CH_POSITION_ACCURACY = _mscl.InertialTypes_CH_POSITION_ACCURACY
    CH_NORTH = _mscl.InertialTypes_CH_NORTH
    CH_EAST = _mscl.InertialTypes_CH_EAST
    CH_DOWN = _mscl.InertialTypes_CH_DOWN
    CH_SPEED = _mscl.InertialTypes_CH_SPEED
    CH_GROUND_SPEED = _mscl.InertialTypes_CH_GROUND_SPEED
    CH_HEADING = _mscl.InertialTypes_CH_HEADING
    CH_SPEED_ACCURACY = _mscl.InertialTypes_CH_SPEED_ACCURACY
    CH_HEADING_ACCURACY = _mscl.InertialTypes_CH_HEADING_ACCURACY
    CH_VELOCITY_ACCURACY = _mscl.InertialTypes_CH_VELOCITY_ACCURACY
    CH_GEOMETRIC_DOP = _mscl.InertialTypes_CH_GEOMETRIC_DOP
    CH_POSITION_DOP = _mscl.InertialTypes_CH_POSITION_DOP
    CH_HORIZONTAL_DOP = _mscl.InertialTypes_CH_HORIZONTAL_DOP
    CH_VERTICAL_DOP = _mscl.InertialTypes_CH_VERTICAL_DOP
    CH_TIME_DOP = _mscl.InertialTypes_CH_TIME_DOP
    CH_NORTHING_DOP = _mscl.InertialTypes_CH_NORTHING_DOP
    CH_EASTING_DOP = _mscl.InertialTypes_CH_EASTING_DOP
    CH_FLAGS = _mscl.InertialTypes_CH_FLAGS
    CH_BIAS = _mscl.InertialTypes_CH_BIAS
    CH_DRIFT = _mscl.InertialTypes_CH_DRIFT
    CH_ACCURACY_ESTIMATE = _mscl.InertialTypes_CH_ACCURACY_ESTIMATE
    CH_FIX_TYPE = _mscl.InertialTypes_CH_FIX_TYPE
    CH_SV_COUNT = _mscl.InertialTypes_CH_SV_COUNT
    CH_CHANNEL = _mscl.InertialTypes_CH_CHANNEL
    CH_ID = _mscl.InertialTypes_CH_ID
    CH_CARRIER_TO_NOISE_RATIO = _mscl.InertialTypes_CH_CARRIER_TO_NOISE_RATIO
    CH_AZIMUTH = _mscl.InertialTypes_CH_AZIMUTH
    CH_ELEVATION = _mscl.InertialTypes_CH_ELEVATION
    CH_SENSOR_STATE = _mscl.InertialTypes_CH_SENSOR_STATE
    CH_ANTENNA_STATE = _mscl.InertialTypes_CH_ANTENNA_STATE
    CH_ANTENNA_POWER = _mscl.InertialTypes_CH_ANTENNA_POWER
    CH_FILTER_STATE = _mscl.InertialTypes_CH_FILTER_STATE
    CH_DYNAMICS_MODE = _mscl.InertialTypes_CH_DYNAMICS_MODE
    CH_MAGNITUDE = _mscl.InertialTypes_CH_MAGNITUDE
    CH_HEADING_UNCERTAINTY = _mscl.InertialTypes_CH_HEADING_UNCERTAINTY
    CH_SOURCE = _mscl.InertialTypes_CH_SOURCE
    CH_INCLINATION = _mscl.InertialTypes_CH_INCLINATION
    CH_DECLINATION = _mscl.InertialTypes_CH_DECLINATION
    CH_PRESSURE = _mscl.InertialTypes_CH_PRESSURE
    CH_AGE = _mscl.InertialTypes_CH_AGE
    CH_NUM_CHANNELS = _mscl.InertialTypes_CH_NUM_CHANNELS
    CH_CORRECTION = _mscl.InertialTypes_CH_CORRECTION
    CH_RATE_CORRECTION = _mscl.InertialTypes_CH_RATE_CORRECTION
    CH_GEOMETRIC_ALTITUDE = _mscl.InertialTypes_CH_GEOMETRIC_ALTITUDE
    CH_GEOPOTENTIAL_ALTITUDE = _mscl.InertialTypes_CH_GEOPOTENTIAL_ALTITUDE
    CH_TEMPERATURE = _mscl.InertialTypes_CH_TEMPERATURE
    CH_DENSITY = _mscl.InertialTypes_CH_DENSITY
    CH_ALTITUDE = _mscl.InertialTypes_CH_ALTITUDE
    def __init__(self): 
        this = _mscl.new_InertialTypes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_InertialTypes
    __del__ = lambda self : None;
InertialTypes_swigregister = _mscl.InertialTypes_swigregister
InertialTypes_swigregister(InertialTypes)

class InertialChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_InertialChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def channelField(self): return _mscl.InertialChannel_channelField(self)
    def sampleRate(self): return _mscl.InertialChannel_sampleRate(self)
    def rateDecimation(self, *args): return _mscl.InertialChannel_rateDecimation(self, *args)
    def validateSampleRate(self, *args): return _mscl.InertialChannel_validateSampleRate(self, *args)
    __swig_destroy__ = _mscl.delete_InertialChannel
    __del__ = lambda self : None;
InertialChannel_swigregister = _mscl.InertialChannel_swigregister
InertialChannel_swigregister(InertialChannel)

class InertialPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialPacket, name)
    __repr__ = _swig_repr
    MIP_ACK_NACK_ERROR_NONE = _mscl.InertialPacket_MIP_ACK_NACK_ERROR_NONE
    MIP_ACK_NACK_ERROR_UNKNOWN_COMMAND = _mscl.InertialPacket_MIP_ACK_NACK_ERROR_UNKNOWN_COMMAND
    MIP_ACK_NACK_ERROR_CHECKSUM_INVALID = _mscl.InertialPacket_MIP_ACK_NACK_ERROR_CHECKSUM_INVALID
    MIP_ACK_NACK_ERROR_PARAMETER_INVALID = _mscl.InertialPacket_MIP_ACK_NACK_ERROR_PARAMETER_INVALID
    MIP_ACK_NACK_ERROR_COMMAND_FAILED = _mscl.InertialPacket_MIP_ACK_NACK_ERROR_COMMAND_FAILED
    MIP_ACK_NACK_ERROR_COMMAND_TIMEOUT = _mscl.InertialPacket_MIP_ACK_NACK_ERROR_COMMAND_TIMEOUT
    MIP_ACK_NACK_ERROR_UNKNOWN_DESCRIPTOR_SET = _mscl.InertialPacket_MIP_ACK_NACK_ERROR_UNKNOWN_DESCRIPTOR_SET
    def __init__(self): 
        this = _mscl.new_InertialPacket()
        try: self.this.append(this)
        except: self.this = this
    def isDataPacket(self): return _mscl.InertialPacket_isDataPacket(self)
    def descriptorSet(self): return _mscl.InertialPacket_descriptorSet(self)
    def payload(self): return _mscl.InertialPacket_payload(self)
    __swig_destroy__ = _mscl.delete_InertialPacket
    __del__ = lambda self : None;
InertialPacket_swigregister = _mscl.InertialPacket_swigregister
InertialPacket_swigregister(InertialPacket)

class InertialDataPoint(DataPoint):
    __swig_setmethods__ = {}
    for _s in [DataPoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialDataPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [DataPoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InertialDataPoint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def field(self): return _mscl.InertialDataPoint_field(self)
    def qualifier(self): return _mscl.InertialDataPoint_qualifier(self)
    def valid(self): return _mscl.InertialDataPoint_valid(self)
    def channelName(self): return _mscl.InertialDataPoint_channelName(self)
    def __str__(self): return _mscl.InertialDataPoint___str__(self)
    __swig_destroy__ = _mscl.delete_InertialDataPoint
    __del__ = lambda self : None;
InertialDataPoint_swigregister = _mscl.InertialDataPoint_swigregister
InertialDataPoint_swigregister(InertialDataPoint)

class InertialDataEnums(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialDataEnums, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialDataEnums, name)
    __repr__ = _swig_repr
    FIXTYPE_3D = _mscl.InertialDataEnums_FIXTYPE_3D
    FIXTYPE_2D = _mscl.InertialDataEnums_FIXTYPE_2D
    FIXTYPE_TIMEONLY = _mscl.InertialDataEnums_FIXTYPE_TIMEONLY
    FIXTYPE_NONE = _mscl.InertialDataEnums_FIXTYPE_NONE
    FIXTYPE_INVALID = _mscl.InertialDataEnums_FIXTYPE_INVALID
    SENSORSTATE_OFF = _mscl.InertialDataEnums_SENSORSTATE_OFF
    SENSORSTATE_ON = _mscl.InertialDataEnums_SENSORSTATE_ON
    SENSORSTATE_UNKNOWN = _mscl.InertialDataEnums_SENSORSTATE_UNKNOWN
    ANTENNASTATE_INIT = _mscl.InertialDataEnums_ANTENNASTATE_INIT
    ANTENNASTATE_SHORT = _mscl.InertialDataEnums_ANTENNASTATE_SHORT
    ANTENNASTATE_OPEN = _mscl.InertialDataEnums_ANTENNASTATE_OPEN
    ANTENNASTATE_GOOD = _mscl.InertialDataEnums_ANTENNASTATE_GOOD
    ANTENNASTATE_UNKNOWN = _mscl.InertialDataEnums_ANTENNASTATE_UNKNOWN
    ANTENNAPOWER_OFF = _mscl.InertialDataEnums_ANTENNAPOWER_OFF
    ANTENNAPOWER_ON = _mscl.InertialDataEnums_ANTENNAPOWER_ON
    ANTENNAPOWER_UNKNOWN = _mscl.InertialDataEnums_ANTENNAPOWER_UNKNOWN
    FILTERSTATE_STARTUP = _mscl.InertialDataEnums_FILTERSTATE_STARTUP
    FILTERSTATE_INIT = _mscl.InertialDataEnums_FILTERSTATE_INIT
    FILTERSTATE_RUNNING_SLN_VALID = _mscl.InertialDataEnums_FILTERSTATE_RUNNING_SLN_VALID
    FILTERSTATE_RUNNING_SLN_ERROR = _mscl.InertialDataEnums_FILTERSTATE_RUNNING_SLN_ERROR
    DYNAMICSMODE_PORTABLE = _mscl.InertialDataEnums_DYNAMICSMODE_PORTABLE
    DYNAMICSMODE_AUTOMOTIVE = _mscl.InertialDataEnums_DYNAMICSMODE_AUTOMOTIVE
    DYNAMICSMODE_AIRBORNE = _mscl.InertialDataEnums_DYNAMICSMODE_AIRBORNE
    FILTERSTATUS_IMU_UNAVAILABLE = _mscl.InertialDataEnums_FILTERSTATUS_IMU_UNAVAILABLE
    FILTERSTATUS_GPS_UNAVAILABLE = _mscl.InertialDataEnums_FILTERSTATUS_GPS_UNAVAILABLE
    FILTERSTATUS_MATRIX_SINGULARITY_IN_CALC = _mscl.InertialDataEnums_FILTERSTATUS_MATRIX_SINGULARITY_IN_CALC
    FILTERSTATUS_POS_COVARIANCE_HIGH_WARN = _mscl.InertialDataEnums_FILTERSTATUS_POS_COVARIANCE_HIGH_WARN
    FILTERSTATUS_VEL_COVARIANCE_HIGH_WARN = _mscl.InertialDataEnums_FILTERSTATUS_VEL_COVARIANCE_HIGH_WARN
    FILTERSTATUS_ATT_COVARIANCE_HIGH_WARN = _mscl.InertialDataEnums_FILTERSTATUS_ATT_COVARIANCE_HIGH_WARN
    FILTERSTATUS_NAN_IN_SOLUTION = _mscl.InertialDataEnums_FILTERSTATUS_NAN_IN_SOLUTION
    FILTERSTATUS_ATT_NOT_INIT = _mscl.InertialDataEnums_FILTERSTATUS_ATT_NOT_INIT
    FILTERSTATUS_POS_VEL_NOT_INIT = _mscl.InertialDataEnums_FILTERSTATUS_POS_VEL_NOT_INIT
    HEADINGSOURCE_NONE = _mscl.InertialDataEnums_HEADINGSOURCE_NONE
    HEADINGSOURCE_INTERNAL_MAGNETOMETER = _mscl.InertialDataEnums_HEADINGSOURCE_INTERNAL_MAGNETOMETER
    HEADINGSOURCE_INTERNAL_GPS_VELOCITY_VECTOR = _mscl.InertialDataEnums_HEADINGSOURCE_INTERNAL_GPS_VELOCITY_VECTOR
    HEADINGSOURCE_EXTERNAL_HEADING_UPDATE_CMD = _mscl.InertialDataEnums_HEADINGSOURCE_EXTERNAL_HEADING_UPDATE_CMD
    def __init__(self): 
        this = _mscl.new_InertialDataEnums()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_InertialDataEnums
    __del__ = lambda self : None;
InertialDataEnums_swigregister = _mscl.InertialDataEnums_swigregister
InertialDataEnums_swigregister(InertialDataEnums)

class InertialDataPacket(InertialPacket):
    __swig_setmethods__ = {}
    for _s in [InertialPacket]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialDataPacket, name, value)
    __swig_getmethods__ = {}
    for _s in [InertialPacket]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InertialDataPacket, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_InertialDataPacket(*args)
        try: self.this.append(this)
        except: self.this = this
    def data(self): return _mscl.InertialDataPacket_data(self)
    def timestamp(self): return _mscl.InertialDataPacket_timestamp(self)
    __swig_destroy__ = _mscl.delete_InertialDataPacket
    __del__ = lambda self : None;
InertialDataPacket_swigregister = _mscl.InertialDataPacket_swigregister
InertialDataPacket_swigregister(InertialDataPacket)

class InertialNodeInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialNodeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialNodeInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def firmwareVersion(self): return _mscl.InertialNodeInfo_firmwareVersion(self)
    def model(self): return _mscl.InertialNodeInfo_model(self)
    def modelName(self): return _mscl.InertialNodeInfo_modelName(self)
    def modelNumber(self): return _mscl.InertialNodeInfo_modelNumber(self)
    def serialNumber(self): return _mscl.InertialNodeInfo_serialNumber(self)
    def lotNumber(self): return _mscl.InertialNodeInfo_lotNumber(self)
    def deviceOptions(self): return _mscl.InertialNodeInfo_deviceOptions(self)
    def supportedChannelFields(self, *args): return _mscl.InertialNodeInfo_supportedChannelFields(self, *args)
    def supportsCategory(self, *args): return _mscl.InertialNodeInfo_supportsCategory(self, *args)
    def supportsCommand(self, *args): return _mscl.InertialNodeInfo_supportsCommand(self, *args)
    __swig_destroy__ = _mscl.delete_InertialNodeInfo
    __del__ = lambda self : None;
InertialNodeInfo_swigregister = _mscl.InertialNodeInfo_swigregister
InertialNodeInfo_swigregister(InertialNodeInfo)

class InertialNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_InertialNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["deviceName"] = lambda x: _mscl.InertialNode_deviceName
    if _newclass:deviceName = staticmethod(_mscl.InertialNode_deviceName)
    def lastCommunicationTime(self): return _mscl.InertialNode_lastCommunicationTime(self)
    def supportedSampleRates(self, *args): return _mscl.InertialNode_supportedSampleRates(self, *args)
    def getNextDataPacket(self, timeout=0): return _mscl.InertialNode_getNextDataPacket(self, timeout)
    def getDataPackets(self, timeout=0, maxPackets=0): return _mscl.InertialNode_getDataPackets(self, timeout, maxPackets)
    def totalPackets(self): return _mscl.InertialNode_totalPackets(self)
    def commandsTimeout(self, *args): return _mscl.InertialNode_commandsTimeout(self, *args)
    def info(self): return _mscl.InertialNode_info(self)
    def name(self): return _mscl.InertialNode_name(self)
    def ping(self): return _mscl.InertialNode_ping(self)
    def setToIdle(self): return _mscl.InertialNode_setToIdle(self)
    def resume(self): return _mscl.InertialNode_resume(self)
    def getDataRateBase(self, *args): return _mscl.InertialNode_getDataRateBase(self, *args)
    def getActiveChannelFields(self, *args): return _mscl.InertialNode_getActiveChannelFields(self, *args)
    def setActiveChannelFields(self, *args): return _mscl.InertialNode_setActiveChannelFields(self, *args)
    def getCommunicationMode(self): return _mscl.InertialNode_getCommunicationMode(self)
    def setCommunicationMode(self, *args): return _mscl.InertialNode_setCommunicationMode(self, *args)
    def enableDataStream(self, *args): return _mscl.InertialNode_enableDataStream(self, *args)
    __swig_destroy__ = _mscl.delete_InertialNode
    __del__ = lambda self : None;
InertialNode_swigregister = _mscl.InertialNode_swigregister
InertialNode_swigregister(InertialNode)

def InertialNode_deviceName(*args):
  return _mscl.InertialNode_deviceName(*args)
InertialNode_deviceName = _mscl.InertialNode_deviceName

class ChannelData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelData, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.ChannelData_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.ChannelData___nonzero__(self)
    def __bool__(self): return _mscl.ChannelData___bool__(self)
    def __len__(self): return _mscl.ChannelData___len__(self)
    def pop(self): return _mscl.ChannelData_pop(self)
    def __getslice__(self, *args): return _mscl.ChannelData___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.ChannelData___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.ChannelData___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.ChannelData___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.ChannelData___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.ChannelData___setitem__(self, *args)
    def append(self, *args): return _mscl.ChannelData_append(self, *args)
    def empty(self): return _mscl.ChannelData_empty(self)
    def size(self): return _mscl.ChannelData_size(self)
    def clear(self): return _mscl.ChannelData_clear(self)
    def swap(self, *args): return _mscl.ChannelData_swap(self, *args)
    def get_allocator(self): return _mscl.ChannelData_get_allocator(self)
    def begin(self): return _mscl.ChannelData_begin(self)
    def end(self): return _mscl.ChannelData_end(self)
    def rbegin(self): return _mscl.ChannelData_rbegin(self)
    def rend(self): return _mscl.ChannelData_rend(self)
    def pop_back(self): return _mscl.ChannelData_pop_back(self)
    def erase(self, *args): return _mscl.ChannelData_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_ChannelData(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.ChannelData_push_back(self, *args)
    def front(self): return _mscl.ChannelData_front(self)
    def back(self): return _mscl.ChannelData_back(self)
    def assign(self, *args): return _mscl.ChannelData_assign(self, *args)
    def resize(self, *args): return _mscl.ChannelData_resize(self, *args)
    def insert(self, *args): return _mscl.ChannelData_insert(self, *args)
    def reserve(self, *args): return _mscl.ChannelData_reserve(self, *args)
    def capacity(self): return _mscl.ChannelData_capacity(self)
    __swig_destroy__ = _mscl.delete_ChannelData
    __del__ = lambda self : None;
ChannelData_swigregister = _mscl.ChannelData_swigregister
ChannelData_swigregister(ChannelData)

class InertialDataPoints(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialDataPoints, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialDataPoints, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.InertialDataPoints_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.InertialDataPoints___nonzero__(self)
    def __bool__(self): return _mscl.InertialDataPoints___bool__(self)
    def __len__(self): return _mscl.InertialDataPoints___len__(self)
    def pop(self): return _mscl.InertialDataPoints_pop(self)
    def __getslice__(self, *args): return _mscl.InertialDataPoints___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.InertialDataPoints___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.InertialDataPoints___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.InertialDataPoints___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.InertialDataPoints___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.InertialDataPoints___setitem__(self, *args)
    def append(self, *args): return _mscl.InertialDataPoints_append(self, *args)
    def empty(self): return _mscl.InertialDataPoints_empty(self)
    def size(self): return _mscl.InertialDataPoints_size(self)
    def clear(self): return _mscl.InertialDataPoints_clear(self)
    def swap(self, *args): return _mscl.InertialDataPoints_swap(self, *args)
    def get_allocator(self): return _mscl.InertialDataPoints_get_allocator(self)
    def begin(self): return _mscl.InertialDataPoints_begin(self)
    def end(self): return _mscl.InertialDataPoints_end(self)
    def rbegin(self): return _mscl.InertialDataPoints_rbegin(self)
    def rend(self): return _mscl.InertialDataPoints_rend(self)
    def pop_back(self): return _mscl.InertialDataPoints_pop_back(self)
    def erase(self, *args): return _mscl.InertialDataPoints_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_InertialDataPoints(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.InertialDataPoints_push_back(self, *args)
    def front(self): return _mscl.InertialDataPoints_front(self)
    def back(self): return _mscl.InertialDataPoints_back(self)
    def assign(self, *args): return _mscl.InertialDataPoints_assign(self, *args)
    def resize(self, *args): return _mscl.InertialDataPoints_resize(self, *args)
    def insert(self, *args): return _mscl.InertialDataPoints_insert(self, *args)
    def reserve(self, *args): return _mscl.InertialDataPoints_reserve(self, *args)
    def capacity(self): return _mscl.InertialDataPoints_capacity(self)
    __swig_destroy__ = _mscl.delete_InertialDataPoints
    __del__ = lambda self : None;
InertialDataPoints_swigregister = _mscl.InertialDataPoints_swigregister
InertialDataPoints_swigregister(InertialDataPoints)

class Bytes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bytes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bytes, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.Bytes_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.Bytes___nonzero__(self)
    def __bool__(self): return _mscl.Bytes___bool__(self)
    def __len__(self): return _mscl.Bytes___len__(self)
    def pop(self): return _mscl.Bytes_pop(self)
    def __getslice__(self, *args): return _mscl.Bytes___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.Bytes___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.Bytes___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.Bytes___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.Bytes___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.Bytes___setitem__(self, *args)
    def append(self, *args): return _mscl.Bytes_append(self, *args)
    def empty(self): return _mscl.Bytes_empty(self)
    def size(self): return _mscl.Bytes_size(self)
    def clear(self): return _mscl.Bytes_clear(self)
    def swap(self, *args): return _mscl.Bytes_swap(self, *args)
    def get_allocator(self): return _mscl.Bytes_get_allocator(self)
    def begin(self): return _mscl.Bytes_begin(self)
    def end(self): return _mscl.Bytes_end(self)
    def rbegin(self): return _mscl.Bytes_rbegin(self)
    def rend(self): return _mscl.Bytes_rend(self)
    def pop_back(self): return _mscl.Bytes_pop_back(self)
    def erase(self, *args): return _mscl.Bytes_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_Bytes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.Bytes_push_back(self, *args)
    def front(self): return _mscl.Bytes_front(self)
    def back(self): return _mscl.Bytes_back(self)
    def assign(self, *args): return _mscl.Bytes_assign(self, *args)
    def resize(self, *args): return _mscl.Bytes_resize(self, *args)
    def insert(self, *args): return _mscl.Bytes_insert(self, *args)
    def reserve(self, *args): return _mscl.Bytes_reserve(self, *args)
    def capacity(self): return _mscl.Bytes_capacity(self)
    __swig_destroy__ = _mscl.delete_Bytes
    __del__ = lambda self : None;
Bytes_swigregister = _mscl.Bytes_swigregister
Bytes_swigregister(Bytes)

class DeviceList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceList, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.DeviceList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.DeviceList___nonzero__(self)
    def __bool__(self): return _mscl.DeviceList___bool__(self)
    def __len__(self): return _mscl.DeviceList___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _mscl.DeviceList___getitem__(self, *args)
    def __delitem__(self, *args): return _mscl.DeviceList___delitem__(self, *args)
    def has_key(self, *args): return _mscl.DeviceList_has_key(self, *args)
    def keys(self): return _mscl.DeviceList_keys(self)
    def values(self): return _mscl.DeviceList_values(self)
    def items(self): return _mscl.DeviceList_items(self)
    def __contains__(self, *args): return _mscl.DeviceList___contains__(self, *args)
    def key_iterator(self): return _mscl.DeviceList_key_iterator(self)
    def value_iterator(self): return _mscl.DeviceList_value_iterator(self)
    def __setitem__(self, *args): return _mscl.DeviceList___setitem__(self, *args)
    def asdict(self): return _mscl.DeviceList_asdict(self)
    def __init__(self, *args): 
        this = _mscl.new_DeviceList(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _mscl.DeviceList_empty(self)
    def size(self): return _mscl.DeviceList_size(self)
    def clear(self): return _mscl.DeviceList_clear(self)
    def swap(self, *args): return _mscl.DeviceList_swap(self, *args)
    def get_allocator(self): return _mscl.DeviceList_get_allocator(self)
    def begin(self): return _mscl.DeviceList_begin(self)
    def end(self): return _mscl.DeviceList_end(self)
    def rbegin(self): return _mscl.DeviceList_rbegin(self)
    def rend(self): return _mscl.DeviceList_rend(self)
    def count(self, *args): return _mscl.DeviceList_count(self, *args)
    def erase(self, *args): return _mscl.DeviceList_erase(self, *args)
    def find(self, *args): return _mscl.DeviceList_find(self, *args)
    def lower_bound(self, *args): return _mscl.DeviceList_lower_bound(self, *args)
    def upper_bound(self, *args): return _mscl.DeviceList_upper_bound(self, *args)
    __swig_destroy__ = _mscl.delete_DeviceList
    __del__ = lambda self : None;
DeviceList_swigregister = _mscl.DeviceList_swigregister
DeviceList_swigregister(DeviceList)

class NodeDiscoveries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeDiscoveries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeDiscoveries, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.NodeDiscoveries_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.NodeDiscoveries___nonzero__(self)
    def __bool__(self): return _mscl.NodeDiscoveries___bool__(self)
    def __len__(self): return _mscl.NodeDiscoveries___len__(self)
    def pop(self): return _mscl.NodeDiscoveries_pop(self)
    def __getslice__(self, *args): return _mscl.NodeDiscoveries___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.NodeDiscoveries___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.NodeDiscoveries___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.NodeDiscoveries___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.NodeDiscoveries___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.NodeDiscoveries___setitem__(self, *args)
    def append(self, *args): return _mscl.NodeDiscoveries_append(self, *args)
    def empty(self): return _mscl.NodeDiscoveries_empty(self)
    def size(self): return _mscl.NodeDiscoveries_size(self)
    def clear(self): return _mscl.NodeDiscoveries_clear(self)
    def swap(self, *args): return _mscl.NodeDiscoveries_swap(self, *args)
    def get_allocator(self): return _mscl.NodeDiscoveries_get_allocator(self)
    def begin(self): return _mscl.NodeDiscoveries_begin(self)
    def end(self): return _mscl.NodeDiscoveries_end(self)
    def rbegin(self): return _mscl.NodeDiscoveries_rbegin(self)
    def rend(self): return _mscl.NodeDiscoveries_rend(self)
    def pop_back(self): return _mscl.NodeDiscoveries_pop_back(self)
    def erase(self, *args): return _mscl.NodeDiscoveries_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_NodeDiscoveries(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.NodeDiscoveries_push_back(self, *args)
    def front(self): return _mscl.NodeDiscoveries_front(self)
    def back(self): return _mscl.NodeDiscoveries_back(self)
    def assign(self, *args): return _mscl.NodeDiscoveries_assign(self, *args)
    def resize(self, *args): return _mscl.NodeDiscoveries_resize(self, *args)
    def insert(self, *args): return _mscl.NodeDiscoveries_insert(self, *args)
    def reserve(self, *args): return _mscl.NodeDiscoveries_reserve(self, *args)
    def capacity(self): return _mscl.NodeDiscoveries_capacity(self)
    __swig_destroy__ = _mscl.delete_NodeDiscoveries
    __del__ = lambda self : None;
NodeDiscoveries_swigregister = _mscl.NodeDiscoveries_swigregister
NodeDiscoveries_swigregister(NodeDiscoveries)

class DataSweeps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSweeps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSweeps, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.DataSweeps_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.DataSweeps___nonzero__(self)
    def __bool__(self): return _mscl.DataSweeps___bool__(self)
    def __len__(self): return _mscl.DataSweeps___len__(self)
    def pop(self): return _mscl.DataSweeps_pop(self)
    def __getslice__(self, *args): return _mscl.DataSweeps___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.DataSweeps___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.DataSweeps___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.DataSweeps___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.DataSweeps___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.DataSweeps___setitem__(self, *args)
    def append(self, *args): return _mscl.DataSweeps_append(self, *args)
    def empty(self): return _mscl.DataSweeps_empty(self)
    def size(self): return _mscl.DataSweeps_size(self)
    def clear(self): return _mscl.DataSweeps_clear(self)
    def swap(self, *args): return _mscl.DataSweeps_swap(self, *args)
    def get_allocator(self): return _mscl.DataSweeps_get_allocator(self)
    def begin(self): return _mscl.DataSweeps_begin(self)
    def end(self): return _mscl.DataSweeps_end(self)
    def rbegin(self): return _mscl.DataSweeps_rbegin(self)
    def rend(self): return _mscl.DataSweeps_rend(self)
    def pop_back(self): return _mscl.DataSweeps_pop_back(self)
    def erase(self, *args): return _mscl.DataSweeps_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_DataSweeps(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.DataSweeps_push_back(self, *args)
    def front(self): return _mscl.DataSweeps_front(self)
    def back(self): return _mscl.DataSweeps_back(self)
    def assign(self, *args): return _mscl.DataSweeps_assign(self, *args)
    def resize(self, *args): return _mscl.DataSweeps_resize(self, *args)
    def insert(self, *args): return _mscl.DataSweeps_insert(self, *args)
    def reserve(self, *args): return _mscl.DataSweeps_reserve(self, *args)
    def capacity(self): return _mscl.DataSweeps_capacity(self)
    __swig_destroy__ = _mscl.delete_DataSweeps
    __del__ = lambda self : None;
DataSweeps_swigregister = _mscl.DataSweeps_swigregister
DataSweeps_swigregister(DataSweeps)

class LoggedDataSweeps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoggedDataSweeps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoggedDataSweeps, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.LoggedDataSweeps_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.LoggedDataSweeps___nonzero__(self)
    def __bool__(self): return _mscl.LoggedDataSweeps___bool__(self)
    def __len__(self): return _mscl.LoggedDataSweeps___len__(self)
    def pop(self): return _mscl.LoggedDataSweeps_pop(self)
    def __getslice__(self, *args): return _mscl.LoggedDataSweeps___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.LoggedDataSweeps___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.LoggedDataSweeps___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.LoggedDataSweeps___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.LoggedDataSweeps___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.LoggedDataSweeps___setitem__(self, *args)
    def append(self, *args): return _mscl.LoggedDataSweeps_append(self, *args)
    def empty(self): return _mscl.LoggedDataSweeps_empty(self)
    def size(self): return _mscl.LoggedDataSweeps_size(self)
    def clear(self): return _mscl.LoggedDataSweeps_clear(self)
    def swap(self, *args): return _mscl.LoggedDataSweeps_swap(self, *args)
    def get_allocator(self): return _mscl.LoggedDataSweeps_get_allocator(self)
    def begin(self): return _mscl.LoggedDataSweeps_begin(self)
    def end(self): return _mscl.LoggedDataSweeps_end(self)
    def rbegin(self): return _mscl.LoggedDataSweeps_rbegin(self)
    def rend(self): return _mscl.LoggedDataSweeps_rend(self)
    def pop_back(self): return _mscl.LoggedDataSweeps_pop_back(self)
    def erase(self, *args): return _mscl.LoggedDataSweeps_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_LoggedDataSweeps(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.LoggedDataSweeps_push_back(self, *args)
    def front(self): return _mscl.LoggedDataSweeps_front(self)
    def back(self): return _mscl.LoggedDataSweeps_back(self)
    def assign(self, *args): return _mscl.LoggedDataSweeps_assign(self, *args)
    def resize(self, *args): return _mscl.LoggedDataSweeps_resize(self, *args)
    def insert(self, *args): return _mscl.LoggedDataSweeps_insert(self, *args)
    def reserve(self, *args): return _mscl.LoggedDataSweeps_reserve(self, *args)
    def capacity(self): return _mscl.LoggedDataSweeps_capacity(self)
    __swig_destroy__ = _mscl.delete_LoggedDataSweeps
    __del__ = lambda self : None;
LoggedDataSweeps_swigregister = _mscl.LoggedDataSweeps_swigregister
LoggedDataSweeps_swigregister(LoggedDataSweeps)

class InertialDataPackets(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialDataPackets, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialDataPackets, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.InertialDataPackets_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.InertialDataPackets___nonzero__(self)
    def __bool__(self): return _mscl.InertialDataPackets___bool__(self)
    def __len__(self): return _mscl.InertialDataPackets___len__(self)
    def pop(self): return _mscl.InertialDataPackets_pop(self)
    def __getslice__(self, *args): return _mscl.InertialDataPackets___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.InertialDataPackets___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.InertialDataPackets___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.InertialDataPackets___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.InertialDataPackets___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.InertialDataPackets___setitem__(self, *args)
    def append(self, *args): return _mscl.InertialDataPackets_append(self, *args)
    def empty(self): return _mscl.InertialDataPackets_empty(self)
    def size(self): return _mscl.InertialDataPackets_size(self)
    def clear(self): return _mscl.InertialDataPackets_clear(self)
    def swap(self, *args): return _mscl.InertialDataPackets_swap(self, *args)
    def get_allocator(self): return _mscl.InertialDataPackets_get_allocator(self)
    def begin(self): return _mscl.InertialDataPackets_begin(self)
    def end(self): return _mscl.InertialDataPackets_end(self)
    def rbegin(self): return _mscl.InertialDataPackets_rbegin(self)
    def rend(self): return _mscl.InertialDataPackets_rend(self)
    def pop_back(self): return _mscl.InertialDataPackets_pop_back(self)
    def erase(self, *args): return _mscl.InertialDataPackets_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_InertialDataPackets(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.InertialDataPackets_push_back(self, *args)
    def front(self): return _mscl.InertialDataPackets_front(self)
    def back(self): return _mscl.InertialDataPackets_back(self)
    def assign(self, *args): return _mscl.InertialDataPackets_assign(self, *args)
    def resize(self, *args): return _mscl.InertialDataPackets_resize(self, *args)
    def insert(self, *args): return _mscl.InertialDataPackets_insert(self, *args)
    def reserve(self, *args): return _mscl.InertialDataPackets_reserve(self, *args)
    def capacity(self): return _mscl.InertialDataPackets_capacity(self)
    __swig_destroy__ = _mscl.delete_InertialDataPackets
    __del__ = lambda self : None;
InertialDataPackets_swigregister = _mscl.InertialDataPackets_swigregister
InertialDataPackets_swigregister(InertialDataPackets)

class InertialChannels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialChannels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialChannels, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.InertialChannels_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.InertialChannels___nonzero__(self)
    def __bool__(self): return _mscl.InertialChannels___bool__(self)
    def __len__(self): return _mscl.InertialChannels___len__(self)
    def pop(self): return _mscl.InertialChannels_pop(self)
    def __getslice__(self, *args): return _mscl.InertialChannels___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.InertialChannels___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.InertialChannels___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.InertialChannels___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.InertialChannels___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.InertialChannels___setitem__(self, *args)
    def append(self, *args): return _mscl.InertialChannels_append(self, *args)
    def empty(self): return _mscl.InertialChannels_empty(self)
    def size(self): return _mscl.InertialChannels_size(self)
    def clear(self): return _mscl.InertialChannels_clear(self)
    def swap(self, *args): return _mscl.InertialChannels_swap(self, *args)
    def get_allocator(self): return _mscl.InertialChannels_get_allocator(self)
    def begin(self): return _mscl.InertialChannels_begin(self)
    def end(self): return _mscl.InertialChannels_end(self)
    def rbegin(self): return _mscl.InertialChannels_rbegin(self)
    def rend(self): return _mscl.InertialChannels_rend(self)
    def pop_back(self): return _mscl.InertialChannels_pop_back(self)
    def erase(self, *args): return _mscl.InertialChannels_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_InertialChannels(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.InertialChannels_push_back(self, *args)
    def front(self): return _mscl.InertialChannels_front(self)
    def back(self): return _mscl.InertialChannels_back(self)
    def assign(self, *args): return _mscl.InertialChannels_assign(self, *args)
    def resize(self, *args): return _mscl.InertialChannels_resize(self, *args)
    def insert(self, *args): return _mscl.InertialChannels_insert(self, *args)
    def reserve(self, *args): return _mscl.InertialChannels_reserve(self, *args)
    def capacity(self): return _mscl.InertialChannels_capacity(self)
    __swig_destroy__ = _mscl.delete_InertialChannels
    __del__ = lambda self : None;
InertialChannels_swigregister = _mscl.InertialChannels_swigregister
InertialChannels_swigregister(InertialChannels)

class DataCollectionMethods(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataCollectionMethods, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataCollectionMethods, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.DataCollectionMethods_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.DataCollectionMethods___nonzero__(self)
    def __bool__(self): return _mscl.DataCollectionMethods___bool__(self)
    def __len__(self): return _mscl.DataCollectionMethods___len__(self)
    def pop(self): return _mscl.DataCollectionMethods_pop(self)
    def __getslice__(self, *args): return _mscl.DataCollectionMethods___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.DataCollectionMethods___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.DataCollectionMethods___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.DataCollectionMethods___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.DataCollectionMethods___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.DataCollectionMethods___setitem__(self, *args)
    def append(self, *args): return _mscl.DataCollectionMethods_append(self, *args)
    def empty(self): return _mscl.DataCollectionMethods_empty(self)
    def size(self): return _mscl.DataCollectionMethods_size(self)
    def clear(self): return _mscl.DataCollectionMethods_clear(self)
    def swap(self, *args): return _mscl.DataCollectionMethods_swap(self, *args)
    def get_allocator(self): return _mscl.DataCollectionMethods_get_allocator(self)
    def begin(self): return _mscl.DataCollectionMethods_begin(self)
    def end(self): return _mscl.DataCollectionMethods_end(self)
    def rbegin(self): return _mscl.DataCollectionMethods_rbegin(self)
    def rend(self): return _mscl.DataCollectionMethods_rend(self)
    def pop_back(self): return _mscl.DataCollectionMethods_pop_back(self)
    def erase(self, *args): return _mscl.DataCollectionMethods_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_DataCollectionMethods(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.DataCollectionMethods_push_back(self, *args)
    def front(self): return _mscl.DataCollectionMethods_front(self)
    def back(self): return _mscl.DataCollectionMethods_back(self)
    def assign(self, *args): return _mscl.DataCollectionMethods_assign(self, *args)
    def resize(self, *args): return _mscl.DataCollectionMethods_resize(self, *args)
    def insert(self, *args): return _mscl.DataCollectionMethods_insert(self, *args)
    def reserve(self, *args): return _mscl.DataCollectionMethods_reserve(self, *args)
    def capacity(self): return _mscl.DataCollectionMethods_capacity(self)
    __swig_destroy__ = _mscl.delete_DataCollectionMethods
    __del__ = lambda self : None;
DataCollectionMethods_swigregister = _mscl.DataCollectionMethods_swigregister
DataCollectionMethods_swigregister(DataCollectionMethods)

class DataFormats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataFormats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataFormats, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.DataFormats_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.DataFormats___nonzero__(self)
    def __bool__(self): return _mscl.DataFormats___bool__(self)
    def __len__(self): return _mscl.DataFormats___len__(self)
    def pop(self): return _mscl.DataFormats_pop(self)
    def __getslice__(self, *args): return _mscl.DataFormats___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.DataFormats___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.DataFormats___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.DataFormats___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.DataFormats___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.DataFormats___setitem__(self, *args)
    def append(self, *args): return _mscl.DataFormats_append(self, *args)
    def empty(self): return _mscl.DataFormats_empty(self)
    def size(self): return _mscl.DataFormats_size(self)
    def clear(self): return _mscl.DataFormats_clear(self)
    def swap(self, *args): return _mscl.DataFormats_swap(self, *args)
    def get_allocator(self): return _mscl.DataFormats_get_allocator(self)
    def begin(self): return _mscl.DataFormats_begin(self)
    def end(self): return _mscl.DataFormats_end(self)
    def rbegin(self): return _mscl.DataFormats_rbegin(self)
    def rend(self): return _mscl.DataFormats_rend(self)
    def pop_back(self): return _mscl.DataFormats_pop_back(self)
    def erase(self, *args): return _mscl.DataFormats_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_DataFormats(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.DataFormats_push_back(self, *args)
    def front(self): return _mscl.DataFormats_front(self)
    def back(self): return _mscl.DataFormats_back(self)
    def assign(self, *args): return _mscl.DataFormats_assign(self, *args)
    def resize(self, *args): return _mscl.DataFormats_resize(self, *args)
    def insert(self, *args): return _mscl.DataFormats_insert(self, *args)
    def reserve(self, *args): return _mscl.DataFormats_reserve(self, *args)
    def capacity(self): return _mscl.DataFormats_capacity(self)
    __swig_destroy__ = _mscl.delete_DataFormats
    __del__ = lambda self : None;
DataFormats_swigregister = _mscl.DataFormats_swigregister
DataFormats_swigregister(DataFormats)

class WirelessSampleRates(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WirelessSampleRates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WirelessSampleRates, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.WirelessSampleRates_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.WirelessSampleRates___nonzero__(self)
    def __bool__(self): return _mscl.WirelessSampleRates___bool__(self)
    def __len__(self): return _mscl.WirelessSampleRates___len__(self)
    def pop(self): return _mscl.WirelessSampleRates_pop(self)
    def __getslice__(self, *args): return _mscl.WirelessSampleRates___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.WirelessSampleRates___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.WirelessSampleRates___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.WirelessSampleRates___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.WirelessSampleRates___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.WirelessSampleRates___setitem__(self, *args)
    def append(self, *args): return _mscl.WirelessSampleRates_append(self, *args)
    def empty(self): return _mscl.WirelessSampleRates_empty(self)
    def size(self): return _mscl.WirelessSampleRates_size(self)
    def clear(self): return _mscl.WirelessSampleRates_clear(self)
    def swap(self, *args): return _mscl.WirelessSampleRates_swap(self, *args)
    def get_allocator(self): return _mscl.WirelessSampleRates_get_allocator(self)
    def begin(self): return _mscl.WirelessSampleRates_begin(self)
    def end(self): return _mscl.WirelessSampleRates_end(self)
    def rbegin(self): return _mscl.WirelessSampleRates_rbegin(self)
    def rend(self): return _mscl.WirelessSampleRates_rend(self)
    def pop_back(self): return _mscl.WirelessSampleRates_pop_back(self)
    def erase(self, *args): return _mscl.WirelessSampleRates_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_WirelessSampleRates(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.WirelessSampleRates_push_back(self, *args)
    def front(self): return _mscl.WirelessSampleRates_front(self)
    def back(self): return _mscl.WirelessSampleRates_back(self)
    def assign(self, *args): return _mscl.WirelessSampleRates_assign(self, *args)
    def resize(self, *args): return _mscl.WirelessSampleRates_resize(self, *args)
    def insert(self, *args): return _mscl.WirelessSampleRates_insert(self, *args)
    def reserve(self, *args): return _mscl.WirelessSampleRates_reserve(self, *args)
    def capacity(self): return _mscl.WirelessSampleRates_capacity(self)
    __swig_destroy__ = _mscl.delete_WirelessSampleRates
    __del__ = lambda self : None;
WirelessSampleRates_swigregister = _mscl.WirelessSampleRates_swigregister
WirelessSampleRates_swigregister(WirelessSampleRates)

class SamplingModes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamplingModes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SamplingModes, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.SamplingModes_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.SamplingModes___nonzero__(self)
    def __bool__(self): return _mscl.SamplingModes___bool__(self)
    def __len__(self): return _mscl.SamplingModes___len__(self)
    def pop(self): return _mscl.SamplingModes_pop(self)
    def __getslice__(self, *args): return _mscl.SamplingModes___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.SamplingModes___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.SamplingModes___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.SamplingModes___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.SamplingModes___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.SamplingModes___setitem__(self, *args)
    def append(self, *args): return _mscl.SamplingModes_append(self, *args)
    def empty(self): return _mscl.SamplingModes_empty(self)
    def size(self): return _mscl.SamplingModes_size(self)
    def clear(self): return _mscl.SamplingModes_clear(self)
    def swap(self, *args): return _mscl.SamplingModes_swap(self, *args)
    def get_allocator(self): return _mscl.SamplingModes_get_allocator(self)
    def begin(self): return _mscl.SamplingModes_begin(self)
    def end(self): return _mscl.SamplingModes_end(self)
    def rbegin(self): return _mscl.SamplingModes_rbegin(self)
    def rend(self): return _mscl.SamplingModes_rend(self)
    def pop_back(self): return _mscl.SamplingModes_pop_back(self)
    def erase(self, *args): return _mscl.SamplingModes_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_SamplingModes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.SamplingModes_push_back(self, *args)
    def front(self): return _mscl.SamplingModes_front(self)
    def back(self): return _mscl.SamplingModes_back(self)
    def assign(self, *args): return _mscl.SamplingModes_assign(self, *args)
    def resize(self, *args): return _mscl.SamplingModes_resize(self, *args)
    def insert(self, *args): return _mscl.SamplingModes_insert(self, *args)
    def reserve(self, *args): return _mscl.SamplingModes_reserve(self, *args)
    def capacity(self): return _mscl.SamplingModes_capacity(self)
    __swig_destroy__ = _mscl.delete_SamplingModes
    __del__ = lambda self : None;
SamplingModes_swigregister = _mscl.SamplingModes_swigregister
SamplingModes_swigregister(SamplingModes)

class DefaultModes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultModes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultModes, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.DefaultModes_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.DefaultModes___nonzero__(self)
    def __bool__(self): return _mscl.DefaultModes___bool__(self)
    def __len__(self): return _mscl.DefaultModes___len__(self)
    def pop(self): return _mscl.DefaultModes_pop(self)
    def __getslice__(self, *args): return _mscl.DefaultModes___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.DefaultModes___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.DefaultModes___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.DefaultModes___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.DefaultModes___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.DefaultModes___setitem__(self, *args)
    def append(self, *args): return _mscl.DefaultModes_append(self, *args)
    def empty(self): return _mscl.DefaultModes_empty(self)
    def size(self): return _mscl.DefaultModes_size(self)
    def clear(self): return _mscl.DefaultModes_clear(self)
    def swap(self, *args): return _mscl.DefaultModes_swap(self, *args)
    def get_allocator(self): return _mscl.DefaultModes_get_allocator(self)
    def begin(self): return _mscl.DefaultModes_begin(self)
    def end(self): return _mscl.DefaultModes_end(self)
    def rbegin(self): return _mscl.DefaultModes_rbegin(self)
    def rend(self): return _mscl.DefaultModes_rend(self)
    def pop_back(self): return _mscl.DefaultModes_pop_back(self)
    def erase(self, *args): return _mscl.DefaultModes_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_DefaultModes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.DefaultModes_push_back(self, *args)
    def front(self): return _mscl.DefaultModes_front(self)
    def back(self): return _mscl.DefaultModes_back(self)
    def assign(self, *args): return _mscl.DefaultModes_assign(self, *args)
    def resize(self, *args): return _mscl.DefaultModes_resize(self, *args)
    def insert(self, *args): return _mscl.DefaultModes_insert(self, *args)
    def reserve(self, *args): return _mscl.DefaultModes_reserve(self, *args)
    def capacity(self): return _mscl.DefaultModes_capacity(self)
    __swig_destroy__ = _mscl.delete_DefaultModes
    __del__ = lambda self : None;
DefaultModes_swigregister = _mscl.DefaultModes_swigregister
DefaultModes_swigregister(DefaultModes)

class TransmitPowers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransmitPowers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransmitPowers, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.TransmitPowers_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.TransmitPowers___nonzero__(self)
    def __bool__(self): return _mscl.TransmitPowers___bool__(self)
    def __len__(self): return _mscl.TransmitPowers___len__(self)
    def pop(self): return _mscl.TransmitPowers_pop(self)
    def __getslice__(self, *args): return _mscl.TransmitPowers___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.TransmitPowers___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.TransmitPowers___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.TransmitPowers___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.TransmitPowers___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.TransmitPowers___setitem__(self, *args)
    def append(self, *args): return _mscl.TransmitPowers_append(self, *args)
    def empty(self): return _mscl.TransmitPowers_empty(self)
    def size(self): return _mscl.TransmitPowers_size(self)
    def clear(self): return _mscl.TransmitPowers_clear(self)
    def swap(self, *args): return _mscl.TransmitPowers_swap(self, *args)
    def get_allocator(self): return _mscl.TransmitPowers_get_allocator(self)
    def begin(self): return _mscl.TransmitPowers_begin(self)
    def end(self): return _mscl.TransmitPowers_end(self)
    def rbegin(self): return _mscl.TransmitPowers_rbegin(self)
    def rend(self): return _mscl.TransmitPowers_rend(self)
    def pop_back(self): return _mscl.TransmitPowers_pop_back(self)
    def erase(self, *args): return _mscl.TransmitPowers_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_TransmitPowers(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.TransmitPowers_push_back(self, *args)
    def front(self): return _mscl.TransmitPowers_front(self)
    def back(self): return _mscl.TransmitPowers_back(self)
    def assign(self, *args): return _mscl.TransmitPowers_assign(self, *args)
    def resize(self, *args): return _mscl.TransmitPowers_resize(self, *args)
    def insert(self, *args): return _mscl.TransmitPowers_insert(self, *args)
    def reserve(self, *args): return _mscl.TransmitPowers_reserve(self, *args)
    def capacity(self): return _mscl.TransmitPowers_capacity(self)
    __swig_destroy__ = _mscl.delete_TransmitPowers
    __del__ = lambda self : None;
TransmitPowers_swigregister = _mscl.TransmitPowers_swigregister
TransmitPowers_swigregister(TransmitPowers)

class ChannelGroupSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelGroupSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelGroupSettings, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.ChannelGroupSettings_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.ChannelGroupSettings___nonzero__(self)
    def __bool__(self): return _mscl.ChannelGroupSettings___bool__(self)
    def __len__(self): return _mscl.ChannelGroupSettings___len__(self)
    def pop(self): return _mscl.ChannelGroupSettings_pop(self)
    def __getslice__(self, *args): return _mscl.ChannelGroupSettings___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.ChannelGroupSettings___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.ChannelGroupSettings___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.ChannelGroupSettings___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.ChannelGroupSettings___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.ChannelGroupSettings___setitem__(self, *args)
    def append(self, *args): return _mscl.ChannelGroupSettings_append(self, *args)
    def empty(self): return _mscl.ChannelGroupSettings_empty(self)
    def size(self): return _mscl.ChannelGroupSettings_size(self)
    def clear(self): return _mscl.ChannelGroupSettings_clear(self)
    def swap(self, *args): return _mscl.ChannelGroupSettings_swap(self, *args)
    def get_allocator(self): return _mscl.ChannelGroupSettings_get_allocator(self)
    def begin(self): return _mscl.ChannelGroupSettings_begin(self)
    def end(self): return _mscl.ChannelGroupSettings_end(self)
    def rbegin(self): return _mscl.ChannelGroupSettings_rbegin(self)
    def rend(self): return _mscl.ChannelGroupSettings_rend(self)
    def pop_back(self): return _mscl.ChannelGroupSettings_pop_back(self)
    def erase(self, *args): return _mscl.ChannelGroupSettings_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_ChannelGroupSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.ChannelGroupSettings_push_back(self, *args)
    def front(self): return _mscl.ChannelGroupSettings_front(self)
    def back(self): return _mscl.ChannelGroupSettings_back(self)
    def assign(self, *args): return _mscl.ChannelGroupSettings_assign(self, *args)
    def resize(self, *args): return _mscl.ChannelGroupSettings_resize(self, *args)
    def insert(self, *args): return _mscl.ChannelGroupSettings_insert(self, *args)
    def reserve(self, *args): return _mscl.ChannelGroupSettings_reserve(self, *args)
    def capacity(self): return _mscl.ChannelGroupSettings_capacity(self)
    __swig_destroy__ = _mscl.delete_ChannelGroupSettings
    __del__ = lambda self : None;
ChannelGroupSettings_swigregister = _mscl.ChannelGroupSettings_swigregister
ChannelGroupSettings_swigregister(ChannelGroupSettings)

class SampleRates(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleRates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleRates, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.SampleRates_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.SampleRates___nonzero__(self)
    def __bool__(self): return _mscl.SampleRates___bool__(self)
    def __len__(self): return _mscl.SampleRates___len__(self)
    def pop(self): return _mscl.SampleRates_pop(self)
    def __getslice__(self, *args): return _mscl.SampleRates___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.SampleRates___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.SampleRates___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.SampleRates___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.SampleRates___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.SampleRates___setitem__(self, *args)
    def append(self, *args): return _mscl.SampleRates_append(self, *args)
    def empty(self): return _mscl.SampleRates_empty(self)
    def size(self): return _mscl.SampleRates_size(self)
    def clear(self): return _mscl.SampleRates_clear(self)
    def swap(self, *args): return _mscl.SampleRates_swap(self, *args)
    def get_allocator(self): return _mscl.SampleRates_get_allocator(self)
    def begin(self): return _mscl.SampleRates_begin(self)
    def end(self): return _mscl.SampleRates_end(self)
    def rbegin(self): return _mscl.SampleRates_rbegin(self)
    def rend(self): return _mscl.SampleRates_rend(self)
    def pop_back(self): return _mscl.SampleRates_pop_back(self)
    def erase(self, *args): return _mscl.SampleRates_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_SampleRates(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.SampleRates_push_back(self, *args)
    def front(self): return _mscl.SampleRates_front(self)
    def back(self): return _mscl.SampleRates_back(self)
    def assign(self, *args): return _mscl.SampleRates_assign(self, *args)
    def resize(self, *args): return _mscl.SampleRates_resize(self, *args)
    def insert(self, *args): return _mscl.SampleRates_insert(self, *args)
    def reserve(self, *args): return _mscl.SampleRates_reserve(self, *args)
    def capacity(self): return _mscl.SampleRates_capacity(self)
    __swig_destroy__ = _mscl.delete_SampleRates
    __del__ = lambda self : None;
SampleRates_swigregister = _mscl.SampleRates_swigregister
SampleRates_swigregister(SampleRates)

class ConfigIssues(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigIssues, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigIssues, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.ConfigIssues_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.ConfigIssues___nonzero__(self)
    def __bool__(self): return _mscl.ConfigIssues___bool__(self)
    def __len__(self): return _mscl.ConfigIssues___len__(self)
    def pop(self): return _mscl.ConfigIssues_pop(self)
    def __getslice__(self, *args): return _mscl.ConfigIssues___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.ConfigIssues___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.ConfigIssues___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.ConfigIssues___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.ConfigIssues___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.ConfigIssues___setitem__(self, *args)
    def append(self, *args): return _mscl.ConfigIssues_append(self, *args)
    def empty(self): return _mscl.ConfigIssues_empty(self)
    def size(self): return _mscl.ConfigIssues_size(self)
    def clear(self): return _mscl.ConfigIssues_clear(self)
    def swap(self, *args): return _mscl.ConfigIssues_swap(self, *args)
    def get_allocator(self): return _mscl.ConfigIssues_get_allocator(self)
    def begin(self): return _mscl.ConfigIssues_begin(self)
    def end(self): return _mscl.ConfigIssues_end(self)
    def rbegin(self): return _mscl.ConfigIssues_rbegin(self)
    def rend(self): return _mscl.ConfigIssues_rend(self)
    def pop_back(self): return _mscl.ConfigIssues_pop_back(self)
    def erase(self, *args): return _mscl.ConfigIssues_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_ConfigIssues(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.ConfigIssues_push_back(self, *args)
    def front(self): return _mscl.ConfigIssues_front(self)
    def back(self): return _mscl.ConfigIssues_back(self)
    def assign(self, *args): return _mscl.ConfigIssues_assign(self, *args)
    def resize(self, *args): return _mscl.ConfigIssues_resize(self, *args)
    def insert(self, *args): return _mscl.ConfigIssues_insert(self, *args)
    def reserve(self, *args): return _mscl.ConfigIssues_reserve(self, *args)
    def capacity(self): return _mscl.ConfigIssues_capacity(self)
    __swig_destroy__ = _mscl.delete_ConfigIssues
    __del__ = lambda self : None;
ConfigIssues_swigregister = _mscl.ConfigIssues_swigregister
ConfigIssues_swigregister(ConfigIssues)

class ChannelFields(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelFields, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelFields, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.ChannelFields_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.ChannelFields___nonzero__(self)
    def __bool__(self): return _mscl.ChannelFields___bool__(self)
    def __len__(self): return _mscl.ChannelFields___len__(self)
    def pop(self): return _mscl.ChannelFields_pop(self)
    def __getslice__(self, *args): return _mscl.ChannelFields___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.ChannelFields___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.ChannelFields___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.ChannelFields___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.ChannelFields___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.ChannelFields___setitem__(self, *args)
    def append(self, *args): return _mscl.ChannelFields_append(self, *args)
    def empty(self): return _mscl.ChannelFields_empty(self)
    def size(self): return _mscl.ChannelFields_size(self)
    def clear(self): return _mscl.ChannelFields_clear(self)
    def swap(self, *args): return _mscl.ChannelFields_swap(self, *args)
    def get_allocator(self): return _mscl.ChannelFields_get_allocator(self)
    def begin(self): return _mscl.ChannelFields_begin(self)
    def end(self): return _mscl.ChannelFields_end(self)
    def rbegin(self): return _mscl.ChannelFields_rbegin(self)
    def rend(self): return _mscl.ChannelFields_rend(self)
    def pop_back(self): return _mscl.ChannelFields_pop_back(self)
    def erase(self, *args): return _mscl.ChannelFields_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_ChannelFields(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.ChannelFields_push_back(self, *args)
    def front(self): return _mscl.ChannelFields_front(self)
    def back(self): return _mscl.ChannelFields_back(self)
    def assign(self, *args): return _mscl.ChannelFields_assign(self, *args)
    def resize(self, *args): return _mscl.ChannelFields_resize(self, *args)
    def insert(self, *args): return _mscl.ChannelFields_insert(self, *args)
    def reserve(self, *args): return _mscl.ChannelFields_reserve(self, *args)
    def capacity(self): return _mscl.ChannelFields_capacity(self)
    __swig_destroy__ = _mscl.delete_ChannelFields
    __del__ = lambda self : None;
ChannelFields_swigregister = _mscl.ChannelFields_swigregister
ChannelFields_swigregister(ChannelFields)

class ChannelMasks(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelMasks, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelMasks, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.ChannelMasks_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.ChannelMasks___nonzero__(self)
    def __bool__(self): return _mscl.ChannelMasks___bool__(self)
    def __len__(self): return _mscl.ChannelMasks___len__(self)
    def pop(self): return _mscl.ChannelMasks_pop(self)
    def __getslice__(self, *args): return _mscl.ChannelMasks___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.ChannelMasks___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.ChannelMasks___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.ChannelMasks___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.ChannelMasks___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.ChannelMasks___setitem__(self, *args)
    def append(self, *args): return _mscl.ChannelMasks_append(self, *args)
    def empty(self): return _mscl.ChannelMasks_empty(self)
    def size(self): return _mscl.ChannelMasks_size(self)
    def clear(self): return _mscl.ChannelMasks_clear(self)
    def swap(self, *args): return _mscl.ChannelMasks_swap(self, *args)
    def get_allocator(self): return _mscl.ChannelMasks_get_allocator(self)
    def begin(self): return _mscl.ChannelMasks_begin(self)
    def end(self): return _mscl.ChannelMasks_end(self)
    def rbegin(self): return _mscl.ChannelMasks_rbegin(self)
    def rend(self): return _mscl.ChannelMasks_rend(self)
    def pop_back(self): return _mscl.ChannelMasks_pop_back(self)
    def erase(self, *args): return _mscl.ChannelMasks_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_ChannelMasks(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.ChannelMasks_push_back(self, *args)
    def front(self): return _mscl.ChannelMasks_front(self)
    def back(self): return _mscl.ChannelMasks_back(self)
    def assign(self, *args): return _mscl.ChannelMasks_assign(self, *args)
    def resize(self, *args): return _mscl.ChannelMasks_resize(self, *args)
    def insert(self, *args): return _mscl.ChannelMasks_insert(self, *args)
    def reserve(self, *args): return _mscl.ChannelMasks_reserve(self, *args)
    def capacity(self): return _mscl.ChannelMasks_capacity(self)
    __swig_destroy__ = _mscl.delete_ChannelMasks
    __del__ = lambda self : None;
ChannelMasks_swigregister = _mscl.ChannelMasks_swigregister
ChannelMasks_swigregister(ChannelMasks)

class ChannelGroups(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelGroups, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelGroups, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.ChannelGroups_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.ChannelGroups___nonzero__(self)
    def __bool__(self): return _mscl.ChannelGroups___bool__(self)
    def __len__(self): return _mscl.ChannelGroups___len__(self)
    def pop(self): return _mscl.ChannelGroups_pop(self)
    def __getslice__(self, *args): return _mscl.ChannelGroups___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.ChannelGroups___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.ChannelGroups___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.ChannelGroups___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.ChannelGroups___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.ChannelGroups___setitem__(self, *args)
    def append(self, *args): return _mscl.ChannelGroups_append(self, *args)
    def empty(self): return _mscl.ChannelGroups_empty(self)
    def size(self): return _mscl.ChannelGroups_size(self)
    def clear(self): return _mscl.ChannelGroups_clear(self)
    def swap(self, *args): return _mscl.ChannelGroups_swap(self, *args)
    def get_allocator(self): return _mscl.ChannelGroups_get_allocator(self)
    def begin(self): return _mscl.ChannelGroups_begin(self)
    def end(self): return _mscl.ChannelGroups_end(self)
    def rbegin(self): return _mscl.ChannelGroups_rbegin(self)
    def rend(self): return _mscl.ChannelGroups_rend(self)
    def pop_back(self): return _mscl.ChannelGroups_pop_back(self)
    def erase(self, *args): return _mscl.ChannelGroups_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_ChannelGroups(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.ChannelGroups_push_back(self, *args)
    def front(self): return _mscl.ChannelGroups_front(self)
    def back(self): return _mscl.ChannelGroups_back(self)
    def assign(self, *args): return _mscl.ChannelGroups_assign(self, *args)
    def resize(self, *args): return _mscl.ChannelGroups_resize(self, *args)
    def insert(self, *args): return _mscl.ChannelGroups_insert(self, *args)
    def reserve(self, *args): return _mscl.ChannelGroups_reserve(self, *args)
    def capacity(self): return _mscl.ChannelGroups_capacity(self)
    __swig_destroy__ = _mscl.delete_ChannelGroups
    __del__ = lambda self : None;
ChannelGroups_swigregister = _mscl.ChannelGroups_swigregister
ChannelGroups_swigregister(ChannelGroups)

class WirelessChannels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WirelessChannels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WirelessChannels, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.WirelessChannels_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.WirelessChannels___nonzero__(self)
    def __bool__(self): return _mscl.WirelessChannels___bool__(self)
    def __len__(self): return _mscl.WirelessChannels___len__(self)
    def pop(self): return _mscl.WirelessChannels_pop(self)
    def __getslice__(self, *args): return _mscl.WirelessChannels___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.WirelessChannels___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.WirelessChannels___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.WirelessChannels___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.WirelessChannels___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.WirelessChannels___setitem__(self, *args)
    def append(self, *args): return _mscl.WirelessChannels_append(self, *args)
    def empty(self): return _mscl.WirelessChannels_empty(self)
    def size(self): return _mscl.WirelessChannels_size(self)
    def clear(self): return _mscl.WirelessChannels_clear(self)
    def swap(self, *args): return _mscl.WirelessChannels_swap(self, *args)
    def get_allocator(self): return _mscl.WirelessChannels_get_allocator(self)
    def begin(self): return _mscl.WirelessChannels_begin(self)
    def end(self): return _mscl.WirelessChannels_end(self)
    def rbegin(self): return _mscl.WirelessChannels_rbegin(self)
    def rend(self): return _mscl.WirelessChannels_rend(self)
    def pop_back(self): return _mscl.WirelessChannels_pop_back(self)
    def erase(self, *args): return _mscl.WirelessChannels_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_WirelessChannels(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.WirelessChannels_push_back(self, *args)
    def front(self): return _mscl.WirelessChannels_front(self)
    def back(self): return _mscl.WirelessChannels_back(self)
    def assign(self, *args): return _mscl.WirelessChannels_assign(self, *args)
    def resize(self, *args): return _mscl.WirelessChannels_resize(self, *args)
    def insert(self, *args): return _mscl.WirelessChannels_insert(self, *args)
    def reserve(self, *args): return _mscl.WirelessChannels_reserve(self, *args)
    def capacity(self): return _mscl.WirelessChannels_capacity(self)
    __swig_destroy__ = _mscl.delete_WirelessChannels
    __del__ = lambda self : None;
WirelessChannels_swigregister = _mscl.WirelessChannels_swigregister
WirelessChannels_swigregister(WirelessChannels)

class DamageAngles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DamageAngles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DamageAngles, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.DamageAngles_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.DamageAngles___nonzero__(self)
    def __bool__(self): return _mscl.DamageAngles___bool__(self)
    def __len__(self): return _mscl.DamageAngles___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _mscl.DamageAngles___getitem__(self, *args)
    def __delitem__(self, *args): return _mscl.DamageAngles___delitem__(self, *args)
    def has_key(self, *args): return _mscl.DamageAngles_has_key(self, *args)
    def keys(self): return _mscl.DamageAngles_keys(self)
    def values(self): return _mscl.DamageAngles_values(self)
    def items(self): return _mscl.DamageAngles_items(self)
    def __contains__(self, *args): return _mscl.DamageAngles___contains__(self, *args)
    def key_iterator(self): return _mscl.DamageAngles_key_iterator(self)
    def value_iterator(self): return _mscl.DamageAngles_value_iterator(self)
    def __setitem__(self, *args): return _mscl.DamageAngles___setitem__(self, *args)
    def asdict(self): return _mscl.DamageAngles_asdict(self)
    def __init__(self, *args): 
        this = _mscl.new_DamageAngles(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _mscl.DamageAngles_empty(self)
    def size(self): return _mscl.DamageAngles_size(self)
    def clear(self): return _mscl.DamageAngles_clear(self)
    def swap(self, *args): return _mscl.DamageAngles_swap(self, *args)
    def get_allocator(self): return _mscl.DamageAngles_get_allocator(self)
    def begin(self): return _mscl.DamageAngles_begin(self)
    def end(self): return _mscl.DamageAngles_end(self)
    def rbegin(self): return _mscl.DamageAngles_rbegin(self)
    def rend(self): return _mscl.DamageAngles_rend(self)
    def count(self, *args): return _mscl.DamageAngles_count(self, *args)
    def erase(self, *args): return _mscl.DamageAngles_erase(self, *args)
    def find(self, *args): return _mscl.DamageAngles_find(self, *args)
    def lower_bound(self, *args): return _mscl.DamageAngles_lower_bound(self, *args)
    def upper_bound(self, *args): return _mscl.DamageAngles_upper_bound(self, *args)
    __swig_destroy__ = _mscl.delete_DamageAngles
    __del__ = lambda self : None;
DamageAngles_swigregister = _mscl.DamageAngles_swigregister
DamageAngles_swigregister(DamageAngles)

class SnCurveSegments(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SnCurveSegments, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SnCurveSegments, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.SnCurveSegments_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.SnCurveSegments___nonzero__(self)
    def __bool__(self): return _mscl.SnCurveSegments___bool__(self)
    def __len__(self): return _mscl.SnCurveSegments___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _mscl.SnCurveSegments___getitem__(self, *args)
    def __delitem__(self, *args): return _mscl.SnCurveSegments___delitem__(self, *args)
    def has_key(self, *args): return _mscl.SnCurveSegments_has_key(self, *args)
    def keys(self): return _mscl.SnCurveSegments_keys(self)
    def values(self): return _mscl.SnCurveSegments_values(self)
    def items(self): return _mscl.SnCurveSegments_items(self)
    def __contains__(self, *args): return _mscl.SnCurveSegments___contains__(self, *args)
    def key_iterator(self): return _mscl.SnCurveSegments_key_iterator(self)
    def value_iterator(self): return _mscl.SnCurveSegments_value_iterator(self)
    def __setitem__(self, *args): return _mscl.SnCurveSegments___setitem__(self, *args)
    def asdict(self): return _mscl.SnCurveSegments_asdict(self)
    def __init__(self, *args): 
        this = _mscl.new_SnCurveSegments(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _mscl.SnCurveSegments_empty(self)
    def size(self): return _mscl.SnCurveSegments_size(self)
    def clear(self): return _mscl.SnCurveSegments_clear(self)
    def swap(self, *args): return _mscl.SnCurveSegments_swap(self, *args)
    def get_allocator(self): return _mscl.SnCurveSegments_get_allocator(self)
    def begin(self): return _mscl.SnCurveSegments_begin(self)
    def end(self): return _mscl.SnCurveSegments_end(self)
    def rbegin(self): return _mscl.SnCurveSegments_rbegin(self)
    def rend(self): return _mscl.SnCurveSegments_rend(self)
    def count(self, *args): return _mscl.SnCurveSegments_count(self, *args)
    def erase(self, *args): return _mscl.SnCurveSegments_erase(self, *args)
    def find(self, *args): return _mscl.SnCurveSegments_find(self, *args)
    def lower_bound(self, *args): return _mscl.SnCurveSegments_lower_bound(self, *args)
    def upper_bound(self, *args): return _mscl.SnCurveSegments_upper_bound(self, *args)
    __swig_destroy__ = _mscl.delete_SnCurveSegments
    __del__ = lambda self : None;
SnCurveSegments_swigregister = _mscl.SnCurveSegments_swigregister
SnCurveSegments_swigregister(SnCurveSegments)

class Bins(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bins, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bins, name)
    __repr__ = _swig_repr
    def iterator(self): return _mscl.Bins_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mscl.Bins___nonzero__(self)
    def __bool__(self): return _mscl.Bins___bool__(self)
    def __len__(self): return _mscl.Bins___len__(self)
    def pop(self): return _mscl.Bins_pop(self)
    def __getslice__(self, *args): return _mscl.Bins___getslice__(self, *args)
    def __setslice__(self, *args): return _mscl.Bins___setslice__(self, *args)
    def __delslice__(self, *args): return _mscl.Bins___delslice__(self, *args)
    def __delitem__(self, *args): return _mscl.Bins___delitem__(self, *args)
    def __getitem__(self, *args): return _mscl.Bins___getitem__(self, *args)
    def __setitem__(self, *args): return _mscl.Bins___setitem__(self, *args)
    def append(self, *args): return _mscl.Bins_append(self, *args)
    def empty(self): return _mscl.Bins_empty(self)
    def size(self): return _mscl.Bins_size(self)
    def clear(self): return _mscl.Bins_clear(self)
    def swap(self, *args): return _mscl.Bins_swap(self, *args)
    def get_allocator(self): return _mscl.Bins_get_allocator(self)
    def begin(self): return _mscl.Bins_begin(self)
    def end(self): return _mscl.Bins_end(self)
    def rbegin(self): return _mscl.Bins_rbegin(self)
    def rend(self): return _mscl.Bins_rend(self)
    def pop_back(self): return _mscl.Bins_pop_back(self)
    def erase(self, *args): return _mscl.Bins_erase(self, *args)
    def __init__(self, *args): 
        this = _mscl.new_Bins(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mscl.Bins_push_back(self, *args)
    def front(self): return _mscl.Bins_front(self)
    def back(self): return _mscl.Bins_back(self)
    def assign(self, *args): return _mscl.Bins_assign(self, *args)
    def insert(self, *args): return _mscl.Bins_insert(self, *args)
    def reserve(self, *args): return _mscl.Bins_reserve(self, *args)
    def capacity(self): return _mscl.Bins_capacity(self)
    __swig_destroy__ = _mscl.delete_Bins
    __del__ = lambda self : None;
Bins_swigregister = _mscl.Bins_swigregister
Bins_swigregister(Bins)

class Error(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error
    __del__ = lambda self : None;
    def what(self): return _mscl.Error_what(self)
    def __str__(self): return _mscl.Error___str__(self)
Error_swigregister = _mscl.Error_swigregister
Error_swigregister(Error)

class Error_NotSupported(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_NotSupported, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_NotSupported, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_NotSupported(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_NotSupported
    __del__ = lambda self : None;
Error_NotSupported_swigregister = _mscl.Error_NotSupported_swigregister
Error_NotSupported_swigregister(Error_NotSupported)

class Error_NoData(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_NoData, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_NoData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_NoData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_NoData
    __del__ = lambda self : None;
Error_NoData_swigregister = _mscl.Error_NoData_swigregister
Error_NoData_swigregister(Error_NoData)

class Error_BadDataType(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_BadDataType, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_BadDataType, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_Error_BadDataType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_BadDataType
    __del__ = lambda self : None;
Error_BadDataType_swigregister = _mscl.Error_BadDataType_swigregister
Error_BadDataType_swigregister(Error_BadDataType)

class Error_UnknownSampleRate(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_UnknownSampleRate, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_UnknownSampleRate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_UnknownSampleRate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_UnknownSampleRate
    __del__ = lambda self : None;
Error_UnknownSampleRate_swigregister = _mscl.Error_UnknownSampleRate_swigregister
Error_UnknownSampleRate_swigregister(Error_UnknownSampleRate)

class Error_Timeout(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_Timeout, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_Timeout, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mscl.new_Error_Timeout()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_Timeout
    __del__ = lambda self : None;
Error_Timeout_swigregister = _mscl.Error_Timeout_swigregister
Error_Timeout_swigregister(Error_Timeout)

class Error_Communication(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_Communication, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_Communication, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_Communication(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_Communication
    __del__ = lambda self : None;
Error_Communication_swigregister = _mscl.Error_Communication_swigregister
Error_Communication_swigregister(Error_Communication)

class Error_NodeCommunication(Error_Communication):
    __swig_setmethods__ = {}
    for _s in [Error_Communication]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_NodeCommunication, name, value)
    __swig_getmethods__ = {}
    for _s in [Error_Communication]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_NodeCommunication, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_NodeCommunication(*args)
        try: self.this.append(this)
        except: self.this = this
    def nodeAddress(self): return _mscl.Error_NodeCommunication_nodeAddress(self)
    __swig_destroy__ = _mscl.delete_Error_NodeCommunication
    __del__ = lambda self : None;
Error_NodeCommunication_swigregister = _mscl.Error_NodeCommunication_swigregister
Error_NodeCommunication_swigregister(Error_NodeCommunication)

class Error_Connection(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_Connection, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_Connection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_Connection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_Connection
    __del__ = lambda self : None;
    def code(self): return _mscl.Error_Connection_code(self)
    def value(self): return _mscl.Error_Connection_value(self)
Error_Connection_swigregister = _mscl.Error_Connection_swigregister
Error_Connection_swigregister(Error_Connection)

class Error_InvalidSerialPort(Error_Connection):
    __swig_setmethods__ = {}
    for _s in [Error_Connection]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_InvalidSerialPort, name, value)
    __swig_getmethods__ = {}
    for _s in [Error_Connection]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_InvalidSerialPort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_InvalidSerialPort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_InvalidSerialPort
    __del__ = lambda self : None;
Error_InvalidSerialPort_swigregister = _mscl.Error_InvalidSerialPort_swigregister
Error_InvalidSerialPort_swigregister(Error_InvalidSerialPort)

class Error_InvalidTcpServer(Error_Connection):
    __swig_setmethods__ = {}
    for _s in [Error_Connection]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_InvalidTcpServer, name, value)
    __swig_getmethods__ = {}
    for _s in [Error_Connection]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_InvalidTcpServer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_InvalidTcpServer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_InvalidTcpServer
    __del__ = lambda self : None;
Error_InvalidTcpServer_swigregister = _mscl.Error_InvalidTcpServer_swigregister
Error_InvalidTcpServer_swigregister(Error_InvalidTcpServer)

class Error_InvalidUnixSocket(Error_Connection):
    __swig_setmethods__ = {}
    for _s in [Error_Connection]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_InvalidUnixSocket, name, value)
    __swig_getmethods__ = {}
    for _s in [Error_Connection]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_InvalidUnixSocket, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_InvalidUnixSocket(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_InvalidUnixSocket
    __del__ = lambda self : None;
Error_InvalidUnixSocket_swigregister = _mscl.Error_InvalidUnixSocket_swigregister
Error_InvalidUnixSocket_swigregister(Error_InvalidUnixSocket)

class Error_InertialCmdFailed(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_InertialCmdFailed, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_InertialCmdFailed, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_InertialCmdFailed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_InertialCmdFailed
    __del__ = lambda self : None;
    def code(self): return _mscl.Error_InertialCmdFailed_code(self)
    def value(self): return _mscl.Error_InertialCmdFailed_value(self)
Error_InertialCmdFailed_swigregister = _mscl.Error_InertialCmdFailed_swigregister
Error_InertialCmdFailed_swigregister(Error_InertialCmdFailed)

class Error_InvalidConfig(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_InvalidConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_InvalidConfig, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_InvalidConfig(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_InvalidConfig
    __del__ = lambda self : None;
    def issues(self): return _mscl.Error_InvalidConfig_issues(self)
Error_InvalidConfig_swigregister = _mscl.Error_InvalidConfig_swigregister
Error_InvalidConfig_swigregister(Error_InvalidConfig)

class Error_InvalidNodeConfig(Error_InvalidConfig):
    __swig_setmethods__ = {}
    for _s in [Error_InvalidConfig]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_InvalidNodeConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [Error_InvalidConfig]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_InvalidNodeConfig, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mscl.new_Error_InvalidNodeConfig(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mscl.delete_Error_InvalidNodeConfig
    __del__ = lambda self : None;
    def nodeAddress(self): return _mscl.Error_InvalidNodeConfig_nodeAddress(self)
Error_InvalidNodeConfig_swigregister = _mscl.Error_InvalidNodeConfig_swigregister
Error_InvalidNodeConfig_swigregister(Error_InvalidNodeConfig)

# This file is compatible with both classic and new-style classes.


